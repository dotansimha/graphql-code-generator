import { ReactElement } from 'react';
import { GetStaticPaths, GetStaticProps } from 'next';
import Head from 'next/head';
import { getPackagesData, PackageInfo, PackageWithStats } from '@guild-docs/server/npm';
import { compileMdx } from 'nextra/compile';
import { MDXRemote } from 'next-mdx-remote';
import { components } from 'nextra-theme-docs/theme';
import createLayout from 'nextra-theme-docs';
import themeConfig from '../../../theme.config';
import { PACKAGES } from '@/lib/plugins';
import { PackageCmd } from '@/components';

interface PluginPageProps {
  data: (PackageWithStats & { compiledSource: string })[];
}

type PluginPageParams = {
  name: string;
};

export const getStaticProps: GetStaticProps<PluginPageProps, PluginPageParams> = async ctx => {
  const pluginName = ctx.params?.name;

  const pluginsData =
    typeof pluginName === 'string'
      ? await getPackagesData({
          idSpecific: pluginName,
          packageList: PACKAGES,
        })
        .catch(err => {
          console.log(err)
          throw err
        })
      : [];

  const data = await Promise.all(
    pluginsData.map(async plugin => {
      const source = plugin.readme || plugin.stats?.readme || '';
      const mdx = await compileMdx(source, {
        outputFormat: 'function-body',
        jsx: false,
      });

      const compiledSource = mdx.result;

      return {
        ...plugin,
        compiledSource,
      };
    })
  );

  return {
    props: {
      data,
    },
    // Revalidate at most once every 1 hour
    revalidate: 60 * 60,
  };
};

export const getStaticPaths: GetStaticPaths<PluginPageParams> = async () => {
  const plugins = await getPackagesData({ packageList: PACKAGES });

  return {
    fallback: 'blocking',
    paths: plugins.map(({ identifier }) => ({
      params: {
        name: identifier,
      },
    })),
  };
};

const NextraLayout = createLayout(
  {
    filename: '[name].tsx',
    route: '/plugins/[name]',
    meta: {},
    pageMap: [
      {
        name: 'plugins',
        children: PACKAGES.map(pkg => ({
          name: pkg.identifier,
          route: `/plugins/${pkg.identifier}`,
        })),
        //   [
        //   {
        //     name: '[name]',
        //     route: '/plugins/[name]'
        //   }
        // ],
      },
    ],
    titleText: undefined,
    headings: [],
    hasH1: false,
    timestamp: null,
  },
  themeConfig
);

const PluginPage = ({ data }: PluginPageProps): ReactElement => {
  const pluginData = data[0];

  if (!pluginData) {
    return (
      <div>
        <h2 className="mt-0 mb-4 text-lg font-bold md:text-xl">404</h2>
        <div>Plugin not found.</div>
      </div>
    );
  }

  const description = pluginData.stats?.description ? pluginData.stats.description : null;
  const title = `${pluginData.title} | GraphQL Codegen Plugin Hub`;
  const repoInfo = extractRepositoryInformation(pluginData.stats);

  return (
    <NextraLayout>
      <Head>
        <title>{title}</title>
        <meta name="og:title" content={title} />
        <meta name="twitter:title" content={title} />
        {description && (
          <>
            <meta name="twitter:description" content={description} />
            <meta name="og:description" content={description} />
            <meta name="description" content={description} />
          </>
        )}
      </Head>
      <div>
        <h2>{pluginData.title}</h2>
        <h3>Install</h3>
        <PackageCmd packages={[`-D ${pluginData.npmPackage}`]} />
        <MDXRemote compiledSource={pluginData.compiledSource} components={{ ...components, PackageCmd }} />
      </div>
      {/*<div className="w-[400px] bg-green-100">*/}
      {/*  <h2>Package Details</h2>*/}
      {/*  <div>*/}
      {/*    <div>Package</div>*/}
      {/*    <div>*/}
      {/*      <a href={`https://npmjs.com/package/${pluginData.npmPackage}`}>*/}
      {/*        <Code>{pluginData.npmPackage}</Code>*/}
      {/*      </a>*/}
      {/*    </div>*/}
      {/*    {pluginData.stats?.license ? (*/}
      {/*      <>*/}
      {/*        <div>License</div>*/}
      {/*        <div>*/}
      {/*          <Code>{pluginData.stats.license}</Code>*/}
      {/*        </div>*/}
      {/*      </>*/}
      {/*    ) : null}*/}
      {/*    {pluginData.stats?.version ? (*/}
      {/*      <>*/}
      {/*        <div>Version</div>*/}
      {/*        <div>*/}
      {/*          <Code>{pluginData.stats.version}</Code>*/}
      {/*        </div>*/}
      {/*      </>*/}
      {/*    ) : null}*/}
      {/*    {pluginData.stats?.modifiedDate ? (*/}
      {/*      <>*/}
      {/*        <div>Updated</div>*/}
      {/*        <div>*/}
      {/*          <Code>{format(new Date(pluginData.stats.modifiedDate), 'MMM do, yyyy')}</Code>*/}
      {/*        </div>*/}
      {/*      </>*/}
      {/*    ) : null}*/}
      {/*    {pluginData.stats?.weeklyNPMDownloads ? (*/}
      {/*      <>*/}
      {/*        <div>Weekly Downloads</div>*/}
      {/*        <div>*/}
      {/*          <Code>{pluginData.stats?.weeklyNPMDownloads}</Code>*/}
      {/*        </div>*/}
      {/*      </>*/}
      {/*    ) : null}*/}
      {/*    {repoInfo ? (*/}
      {/*      <EditOnGitHubButton*/}
      {/*        repo={repoInfo.repo}*/}
      {/*        branch={repoInfo.branch}*/}
      {/*        baseDir={repoInfo.baseDir}*/}
      {/*        sourceFilePath={repoInfo.sourceFilePath}*/}
      {/*      />*/}
      {/*    ) : null}*/}
      {/*  </div>*/}
    </NextraLayout>
  );
};

/**
 * TODO: document how people can configure their yoga plugin package.json so it properly processed.
 */
function extractRepositoryInformation(stats?: PackageInfo | null) {
  if (
    stats?.repository == null ||
    typeof stats.repository !== 'object' ||
    !stats.repository.directory ||
    !stats.repository.url
  ) {
    return null;
  }

  const parseRepoURLRegex = /git\+https:\/\/github\.com\/([A-Za-z0-9-]+\/[A-Za-z0-9-]+)\.git/;
  const result = stats.repository.url.match(parseRepoURLRegex);

  if (result === null) {
    return null;
  }

  return {
    repo: result[1],
    baseDir: stats.repository.directory,
    /** TODO: this should probably be more flexible. */
    sourceFilePath: '',
    /** TODO: this should probably be more flexible. */
    branch: 'master',
  };
}

PluginPage.getLayout = NextraLayout.getLayout;

export default PluginPage;
