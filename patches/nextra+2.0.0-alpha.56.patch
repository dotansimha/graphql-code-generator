diff --git a/node_modules/nextra/context.js b/node_modules/nextra/context.js
deleted file mode 100644
index 77e9dd1..0000000
--- a/node_modules/nextra/context.js
+++ /dev/null
@@ -1 +0,0 @@
-module.exports = require('./dist/context')
diff --git a/node_modules/nextra/data.js b/node_modules/nextra/data.js
deleted file mode 100755
index 9016f08..0000000
--- a/node_modules/nextra/data.js
+++ /dev/null
@@ -1 +0,0 @@
-module.exports = require('./dist/ssg')
diff --git a/node_modules/nextra/dist/compile.mjs b/node_modules/nextra/dist/compile.mjs
new file mode 100644
index 0000000..7fe44de
--- /dev/null
+++ b/node_modules/nextra/dist/compile.mjs
@@ -0,0 +1,555 @@
+var __defProp = Object.defineProperty;
+var __defProps = Object.defineProperties;
+var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
+var __getOwnPropSymbols = Object.getOwnPropertySymbols;
+var __hasOwnProp = Object.prototype.hasOwnProperty;
+var __propIsEnum = Object.prototype.propertyIsEnumerable;
+var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
+var __spreadValues = (a, b) => {
+  for (var prop in b || (b = {}))
+    if (__hasOwnProp.call(b, prop))
+      __defNormalProp(a, prop, b[prop]);
+  if (__getOwnPropSymbols)
+    for (var prop of __getOwnPropSymbols(b)) {
+      if (__propIsEnum.call(b, prop))
+        __defNormalProp(a, prop, b[prop]);
+    }
+  return a;
+};
+var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
+var __async = (__this, __arguments, generator) => {
+  return new Promise((resolve, reject) => {
+    var fulfilled = (value) => {
+      try {
+        step(generator.next(value));
+      } catch (e) {
+        reject(e);
+      }
+    };
+    var rejected = (value) => {
+      try {
+        step(generator.throw(value));
+      } catch (e) {
+        reject(e);
+      }
+    };
+    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
+    step((generator = generator.apply(__this, __arguments)).next());
+  });
+};
+
+// src/compile.ts
+import { createProcessor } from "@mdx-js/mdx";
+import remarkGfm from "remark-gfm";
+import rehypePrettyCode from "rehype-pretty-code";
+import { rehypeMdxTitle } from "rehype-mdx-title";
+
+// src/mdx-plugins/static-image.js
+var relative = /^\.{1,2}\//;
+function visit(node, type2, handler) {
+  if (node.type === type2) {
+    handler(node);
+  }
+  if (node.children) {
+    node.children.forEach((n) => visit(n, type2, handler));
+  }
+}
+function ASTNodeImport(name2, from) {
+  return {
+    type: "mdxjsEsm",
+    value: `import ${name2} from "${from}"`,
+    data: {
+      estree: {
+        type: "Program",
+        body: [
+          {
+            type: "ImportDeclaration",
+            specifiers: [
+              {
+                type: "ImportDefaultSpecifier",
+                local: { type: "Identifier", name: name2 }
+              }
+            ],
+            source: {
+              type: "Literal",
+              value: from,
+              raw: `"${from}"`
+            }
+          }
+        ],
+        sourceType: "module"
+      }
+    }
+  };
+}
+function remarkStaticImage() {
+  return (tree, _file, done) => {
+    const importsToInject = [];
+    visit(tree, "image", visitor);
+    tree.children.unshift(...importsToInject);
+    tree.children.unshift(ASTNodeImport("$NextImageNextra", "next/image"));
+    done();
+    function visitor(node) {
+      const url = node.url;
+      if (url && relative.test(url)) {
+        const tempVariableName = `$nextraImage${importsToInject.length}`;
+        Object.assign(node, {
+          type: "mdxJsxFlowElement",
+          name: "$NextImageNextra",
+          attributes: [
+            {
+              type: "mdxJsxAttribute",
+              name: "alt",
+              value: node.alt || ""
+            },
+            {
+              type: "mdxJsxAttribute",
+              name: "placeholder",
+              value: "blur"
+            },
+            {
+              type: "mdxJsxAttribute",
+              name: "src",
+              value: {
+                type: "mdxJsxAttributeValueExpression",
+                value: tempVariableName,
+                data: {
+                  estree: {
+                    type: "Program",
+                    body: [
+                      {
+                        type: "ExpressionStatement",
+                        expression: {
+                          type: "Identifier",
+                          name: tempVariableName
+                        }
+                      }
+                    ],
+                    sourceType: "module"
+                  }
+                }
+              }
+            }
+          ],
+          children: []
+        });
+        importsToInject.push(ASTNodeImport(tempVariableName, url));
+      }
+    }
+  };
+}
+
+// src/mdx-plugins/remark.ts
+function visit2(node, tester, handler) {
+  if (tester(node)) {
+    handler(node);
+  }
+  if (node.children) {
+    node.children.forEach((n) => visit2(n, tester, handler));
+  }
+}
+function getFlattenedValue(node) {
+  return node.children.map((child) => "children" in child ? getFlattenedValue(child) : "value" in child ? child.value : "").join("");
+}
+function remarkHeadings() {
+  const data = this.data();
+  return (tree, _file, done) => {
+    visit2(tree, (node) => {
+      return node.type === "heading" || node.name === "summary" || node.name === "details";
+    }, (node) => {
+      if (node.type === "heading") {
+        const heading = __spreadProps(__spreadValues({}, node), {
+          value: getFlattenedValue(node)
+        });
+        data.headingMeta.headings.push(heading);
+      } else if (node.name === "summary" || node.name === "details") {
+        if (node.data) {
+          delete node.data._mdxExplicitJsx;
+        }
+      }
+    });
+    done();
+  };
+}
+
+// src/mdx-plugins/structurize.js
+import Slugger from "github-slugger";
+function cleanup(content) {
+  return content.trim().split("\n").map((line) => line.trim()).join("\n");
+}
+var structurize_default = (structurizedData, options) => {
+  if (typeof options === "boolean")
+    options = {};
+  options = Object.assign({ codeblocks: true }, options);
+  const slugger = new Slugger();
+  let activeSlug = "";
+  let skip = false;
+  let content = "";
+  return function stripMarkdown() {
+    return (node) => {
+      walk(node);
+      structurizedData[activeSlug] = cleanup(content);
+      return node;
+    };
+    function walk(node) {
+      let result = "";
+      const type2 = node.type;
+      if (type2 === "heading")
+        skip = true;
+      if (["code", "table", "blockquote", "list", "mdxJsxFlowElement"].includes(type2)) {
+        result += "\n";
+        if (!skip)
+          content += "\n";
+      }
+      if ("children" in node) {
+        for (let i = 0; i < node.children.length; i++) {
+          result += walk(node.children[i]);
+        }
+      } else if ([
+        options.codeblocks ? "code" : "",
+        "text",
+        "inlineCode",
+        "tableCell"
+      ].includes(type2)) {
+        result += node.value;
+        if (!skip)
+          content += node.value;
+      }
+      if ([
+        "code",
+        "table",
+        "blockquote",
+        "list",
+        "listItem",
+        "break",
+        "mdxJsxFlowElement"
+      ].includes(type2)) {
+        result += "\n";
+        if (!skip)
+          content += "\n";
+      }
+      if (["tableCell"].includes(type2)) {
+        result += "	";
+        if (!skip)
+          content += "	";
+      }
+      if (type2 === "heading")
+        skip = false;
+      if (type2 === "heading" && node.depth > 1) {
+        structurizedData[activeSlug] = cleanup(content);
+        content = "";
+        activeSlug = slugger.slug(result) + "#" + result;
+      }
+      return result;
+    }
+  };
+};
+
+// src/mdx-plugins/rehype-handler.js
+import Slugger2 from "github-slugger";
+function visit3(node, tagNames, handler) {
+  if (tagNames.includes(node.tagName)) {
+    handler(node);
+    return;
+  }
+  if (node.children) {
+    node.children.forEach((n) => visit3(n, tagNames, handler));
+  }
+}
+function parseMeta() {
+  return (tree) => {
+    visit3(tree, ["pre"], (node) => {
+      var _a, _b, _c;
+      if (Array.isArray(node.children) && node.children.length === 1 && node.children[0].tagName === "code" && typeof node.children[0].properties === "object") {
+        const meta = (_b = (_a = node.children[0].data) == null ? void 0 : _a.meta) != null ? _b : node.children[0].properties.metastring;
+        if (meta) {
+          const filename = (_c = meta.match(/filename="([^"]+)"/)) == null ? void 0 : _c[1];
+          if (filename) {
+            node.__nextra_filename__ = filename;
+          }
+        }
+      }
+    });
+  };
+}
+function attachMeta() {
+  return (tree) => {
+    const slugger = new Slugger2();
+    visit3(tree, ["div", "h2", "h3", "h4", "h5", "h6"], (node) => {
+      if (node.tagName === "div") {
+        if (!("data-rehype-pretty-code-fragment" in node.properties))
+          return;
+        node.properties["data-nextra-code"] = "";
+        if ("__nextra_filename__" in node) {
+          node.properties["data-filename"] = node.__nextra_filename__;
+        }
+      } else {
+        node.properties.id = node.properties.id || slugger.slug(getFlattenedValue(node));
+      }
+    });
+  };
+}
+
+// src/theme.json
+var name = "css-variables";
+var type = "light";
+var colors = {
+  "editor.foreground": "#000001",
+  "editor.background": "#000002"
+};
+var tokenColors = [
+  {
+    settings: {
+      foreground: "#000001"
+    }
+  },
+  {
+    scope: [
+      "markup.deleted",
+      "meta.diff.header.from-file",
+      "punctuation.definition.deleted"
+    ],
+    settings: {
+      foreground: "#ef6270"
+    }
+  },
+  {
+    scope: [
+      "markup.inserted",
+      "meta.diff.header.to-file",
+      "punctuation.definition.inserted"
+    ],
+    settings: {
+      foreground: "#4bb74a"
+    }
+  },
+  {
+    scope: [
+      "keyword.operator.accessor",
+      "meta.group.braces.round.function.arguments",
+      "meta.template.expression",
+      "markup.fenced_code meta.embedded.block"
+    ],
+    settings: {
+      foreground: "#000001"
+    }
+  },
+  {
+    scope: "emphasis",
+    settings: {
+      fontStyle: "italic"
+    }
+  },
+  {
+    scope: ["strong", "markup.heading.markdown", "markup.bold.markdown"],
+    settings: {
+      fontStyle: "bold"
+    }
+  },
+  {
+    scope: ["markup.italic.markdown"],
+    settings: {
+      fontStyle: "italic"
+    }
+  },
+  {
+    scope: "meta.link.inline.markdown",
+    settings: {
+      fontStyle: "underline",
+      foreground: "#000004"
+    }
+  },
+  {
+    scope: ["string", "markup.fenced_code", "markup.inline"],
+    settings: {
+      foreground: "#000005"
+    }
+  },
+  {
+    scope: ["comment", "string.quoted.docstring.multi"],
+    settings: {
+      foreground: "#000006"
+    }
+  },
+  {
+    scope: [
+      "constant.numeric",
+      "constant.language",
+      "constant.other.placeholder",
+      "constant.character.format.placeholder",
+      "variable.language.this",
+      "variable.other.object",
+      "variable.other.class",
+      "variable.other.constant",
+      "meta.property-name",
+      "meta.property-value",
+      "support"
+    ],
+    settings: {
+      foreground: "#000004"
+    }
+  },
+  {
+    scope: [
+      "keyword",
+      "storage.modifier",
+      "storage.type",
+      "storage.control.clojure",
+      "entity.name.function.clojure",
+      "entity.name.tag.yaml",
+      "support.function.node",
+      "support.type.property-name.json",
+      "punctuation.separator.key-value",
+      "punctuation.definition.template-expression"
+    ],
+    settings: {
+      foreground: "#000007"
+    }
+  },
+  {
+    scope: "variable.parameter.function",
+    settings: {
+      foreground: "#000008"
+    }
+  },
+  {
+    scope: [
+      "support.function",
+      "entity.name.type",
+      "entity.other.inherited-class",
+      "meta.function-call",
+      "meta.instance.constructor",
+      "entity.other.attribute-name",
+      "entity.name.function",
+      "constant.keyword.clojure"
+    ],
+    settings: {
+      foreground: "#000009"
+    }
+  },
+  {
+    scope: [
+      "entity.name.tag",
+      "string.quoted",
+      "string.regexp",
+      "string.interpolated",
+      "string.template",
+      "string.unquoted.plain.out.yaml",
+      "keyword.other.template"
+    ],
+    settings: {
+      foreground: "#000010"
+    }
+  },
+  {
+    scope: [
+      "punctuation.definition.arguments",
+      "punctuation.definition.dict",
+      "punctuation.separator",
+      "meta.function-call.arguments"
+    ],
+    settings: {
+      foreground: "#000011"
+    }
+  },
+  {
+    name: "[Custom] Markdown links",
+    scope: [
+      "markup.underline.link",
+      "punctuation.definition.metadata.markdown"
+    ],
+    settings: {
+      foreground: "#000012"
+    }
+  },
+  {
+    name: "[Custom] Markdown list",
+    scope: ["beginning.punctuation.definition.list.markdown"],
+    settings: {
+      foreground: "#000005"
+    }
+  },
+  {
+    name: "[Custom] Markdown punctuation definition brackets",
+    scope: [
+      "punctuation.definition.string.begin.markdown",
+      "punctuation.definition.string.end.markdown",
+      "string.other.link.title.markdown",
+      "string.other.link.description.markdown"
+    ],
+    settings: {
+      foreground: "#000007"
+    }
+  }
+];
+var theme_default = {
+  name,
+  type,
+  colors,
+  tokenColors
+};
+
+// src/compile.ts
+var createCompiler = (mdxOptions) => {
+  const compiler = createProcessor(mdxOptions);
+  compiler.data("headingMeta", {
+    headings: []
+  });
+  return compiler;
+};
+var rehypePrettyCodeOptions = {
+  theme: theme_default,
+  onVisitLine(node) {
+    if (node.children.length === 0) {
+      node.children = [{ type: "text", value: " " }];
+    }
+  },
+  onVisitHighlightedLine(node) {
+    node.properties.className.push("highlighted");
+  },
+  onVisitHighlightedWord(node) {
+    node.properties.className = ["highlighted"];
+  }
+};
+function compileMdx(_0) {
+  return __async(this, arguments, function* (source, mdxOptions = {}, nextraOptions = {}, resourcePath = "") {
+    var _a;
+    const structurizedData = {};
+    const compiler = createCompiler({
+      jsx: (_a = mdxOptions.jsx) != null ? _a : true,
+      outputFormat: mdxOptions.outputFormat,
+      providerImportSource: "@mdx-js/react",
+      remarkPlugins: [
+        ...mdxOptions.remarkPlugins || [],
+        remarkGfm,
+        remarkHeadings,
+        ...nextraOptions.unstable_staticImage ? [remarkStaticImage] : [],
+        ...nextraOptions.unstable_flexsearch ? [structurize_default(structurizedData, nextraOptions.unstable_flexsearch)] : []
+      ].filter(Boolean),
+      rehypePlugins: [
+        ...mdxOptions.rehypePlugins || [],
+        parseMeta,
+        [rehypePrettyCode, rehypePrettyCodeOptions],
+        [rehypeMdxTitle, { name: "titleText" }],
+        attachMeta
+      ].filter(Boolean)
+    });
+    try {
+      const result = yield compiler.process(source);
+      return __spreadProps(__spreadValues({
+        result: String(result)
+      }, compiler.data("headingMeta")), {
+        structurizedData
+      });
+    } catch (err) {
+      console.error(`
+Error compiling ${resourcePath}
+${err}
+`);
+      throw err;
+    }
+  });
+}
+export {
+  compileMdx
+};
diff --git a/node_modules/nextra/dist/content-dump.d.ts b/node_modules/nextra/dist/content-dump.d.ts
old mode 100644
new mode 100755
index 44028fa..77e6504
--- a/node_modules/nextra/dist/content-dump.d.ts
+++ b/node_modules/nextra/dist/content-dump.d.ts
@@ -4,5 +4,5 @@ export declare function addPage({ fileLocale, route, title, data, structurizedDa
     title: string;
     data: any;
     structurizedData: any;
-}): Promise<void>;
+}): void;
 export declare function restoreCache(): Promise<void>;
diff --git a/node_modules/nextra/dist/context.js b/node_modules/nextra/dist/context.js
old mode 100644
new mode 100755
diff --git a/node_modules/nextra/dist/filter-route-locale.d.ts b/node_modules/nextra/dist/filter-route-locale.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/nextra/dist/index.js b/node_modules/nextra/dist/index.js
old mode 100644
new mode 100755
index d288128..895c186
--- a/node_modules/nextra/dist/index.js
+++ b/node_modules/nextra/dist/index.js
@@ -65,27 +65,25 @@ function getLocaleFromFilename(name) {
   const match = name.match(localeRegex);
   if (match)
     return match[1];
-  return void 0;
 }
 function removeExtension(name) {
   const match = name.match(/^([^.]+)/);
   return match !== null ? match[1] : "";
 }
 var parseJsonFile = (content, path4) => {
-  let parsed = {};
   try {
-    parsed = JSON.parse(content);
+    return JSON.parse(content);
   } catch (err) {
     console.error(`Error parsing ${path4}, make sure it's a valid JSON 
 ` + err);
+    return {};
   }
-  return parsed;
 };
-var existsSync = (f) => {
+var existsSync = (filePath) => {
   try {
-    import_fs.default.accessSync(f, import_fs.default.constants.F_OK);
+    import_fs.default.accessSync(filePath, import_fs.default.constants.F_OK);
     return true;
-  } catch (_) {
+  } catch (e) {
     return false;
   }
 };
@@ -115,14 +113,14 @@ var cacheDir = import_path2.default.join(process.cwd(), ".next", "cache");
 var assetDir = import_path2.default.join(process.cwd(), ".next", "static", "chunks");
 try {
   statSync(assetDir);
-} catch (err) {
+} catch (e) {
   mkdirSync(assetDir, { recursive: true });
 }
 var cacheDirExist = false;
 try {
   statSync(cacheDir);
   cacheDirExist = true;
-} catch (err) {
+} catch (e) {
   mkdirSync(cacheDir, { recursive: true });
 }
 function restoreCache() {
@@ -130,7 +128,7 @@ function restoreCache() {
     if (cacheDirExist) {
       try {
         statSync(assetDir);
-      } catch (err) {
+      } catch (e) {
         mkdirSync(assetDir, { recursive: true });
       }
       const files = import_graceful_fs.default.readdirSync(cacheDir);
@@ -216,12 +214,13 @@ var PageMapCache = class {
 };
 var pageMapCache = new PageMapCache();
 var NextraPlugin = class {
-  constructor(nextraConfig) {
-    this.config = nextraConfig;
+  constructor(config) {
+    this.config = config;
   }
   apply(compiler) {
     compiler.hooks.beforeCompile.tapAsync("NextraPlugin", (_, callback) => __async(this, null, function* () {
-      if (this.config && this.config.unstable_flexsearch) {
+      var _a;
+      if ((_a = this.config) == null ? void 0 : _a.unstable_flexsearch) {
         restoreCache();
       }
       const result = yield collectFiles(import_path3.default.join(process.cwd(), findPagesDir()), "/");
@@ -251,6 +250,7 @@ module.exports = (...args) => (nextConfig = {}) => {
   return Object.assign({}, nextConfig, {
     pageExtensions,
     webpack(config, options) {
+      var _a2, _b2;
       const nextra = new NextraPlugin(nextraConfig);
       if (!config.plugins) {
         config.plugins = [nextra];
@@ -263,7 +263,12 @@ module.exports = (...args) => (nextConfig = {}) => {
           options.defaultLoaders.babel,
           {
             loader: "nextra/loader",
-            options: __spreadProps(__spreadValues({}, nextraConfig), { locales, defaultLocale, pageMapCache })
+            options: __spreadProps(__spreadValues({}, nextraConfig), {
+              locales,
+              defaultLocale,
+              pageMapCache,
+              newNextLinkBehavior: (_b2 = (_a2 = nextConfig.experimental) == null ? void 0 : _a2.newNextLinkBehavior) != null ? _b2 : false
+            })
           }
         ]
       });
diff --git a/node_modules/nextra/dist/loader.mjs b/node_modules/nextra/dist/loader.mjs
index 486c1fb..1eabd7b 100644
--- a/node_modules/nextra/dist/loader.mjs
+++ b/node_modules/nextra/dist/loader.mjs
@@ -54,14 +54,14 @@ var asset = {};
 var cached = /* @__PURE__ */ new Map();
 try {
   statSync(assetDir);
-} catch (err) {
+} catch (e) {
   mkdirSync(assetDir, { recursive: true });
 }
 var cacheDirExist = false;
 try {
   statSync(cacheDir);
   cacheDirExist = true;
-} catch (err) {
+} catch (e) {
   mkdirSync(cacheDir, { recursive: true });
 }
 function initFromCache(filename) {
@@ -76,26 +76,22 @@ function initFromCache(filename) {
   }
   return {};
 }
-function addPage(_0) {
-  return __async(this, arguments, function* ({
-    fileLocale,
-    route,
-    title,
-    data,
-    structurizedData
-  }) {
-    const dataFilename = `nextra-data-${fileLocale}.json`;
-    if (!asset[fileLocale]) {
-      asset[fileLocale] = initFromCache(dataFilename);
-    }
-    asset[fileLocale][route] = {
-      title: title || data.title,
-      data: structurizedData
-    };
-    const content = JSON.stringify(asset[fileLocale]);
-    fs.writeFileSync(path.join(assetDir, dataFilename), content);
-    fs.writeFileSync(path.join(cacheDir, dataFilename), content);
-  });
+function addPage({
+  fileLocale,
+  route,
+  title,
+  data,
+  structurizedData
+}) {
+  const dataFilename = `nextra-data-${fileLocale}.json`;
+  asset[fileLocale] || (asset[fileLocale] = initFromCache(dataFilename));
+  asset[fileLocale][route] = {
+    title: title || data.title,
+    data: structurizedData
+  };
+  const content = JSON.stringify(asset[fileLocale]);
+  fs.writeFileSync(path.join(assetDir, dataFilename), content);
+  fs.writeFileSync(path.join(cacheDir, dataFilename), content);
 }
 
 // src/utils.ts
@@ -105,27 +101,25 @@ function getLocaleFromFilename(name2) {
   const match = name2.match(localeRegex);
   if (match)
     return match[1];
-  return void 0;
 }
 function removeExtension(name2) {
   const match = name2.match(/^([^.]+)/);
   return match !== null ? match[1] : "";
 }
 var parseJsonFile = (content, path5) => {
-  let parsed = {};
   try {
-    parsed = JSON.parse(content);
+    return JSON.parse(content);
   } catch (err) {
     console.error(`Error parsing ${path5}, make sure it's a valid JSON 
 ` + err);
+    return {};
   }
-  return parsed;
 };
-var existsSync = (f) => {
+var existsSync = (filePath) => {
   try {
-    fs2.accessSync(f, fs2.constants.F_OK);
+    fs2.accessSync(filePath, fs2.constants.F_OK);
     return true;
-  } catch (_) {
+  } catch (e) {
     return false;
   }
 };
@@ -134,6 +128,7 @@ var existsSync = (f) => {
 import { createProcessor } from "@mdx-js/mdx";
 import remarkGfm from "remark-gfm";
 import rehypePrettyCode from "rehype-pretty-code";
+import { rehypeMdxTitle } from "rehype-mdx-title";
 
 // src/mdx-plugins/static-image.js
 var relative = /^\.{1,2}\//;
@@ -252,17 +247,7 @@ function remarkHeadings() {
         const heading = __spreadProps(__spreadValues({}, node), {
           value: getFlattenedValue(node)
         });
-        const headingMeta = data.headingMeta;
-        if (node.depth === 1) {
-          headingMeta.hasH1 = true;
-          if (Array.isArray(node.children) && node.children.length === 1) {
-            const child = node.children[0];
-            if (child.type === "text") {
-              headingMeta.titleText = child.value;
-            }
-          }
-        }
-        headingMeta.headings.push(heading);
+        data.headingMeta.headings.push(heading);
       } else if (node.name === "summary" || node.name === "details") {
         if (node.data) {
           delete node.data._mdxExplicitJsx;
@@ -594,34 +579,31 @@ var theme_default = {
 var createCompiler = (mdxOptions) => {
   const compiler = createProcessor(mdxOptions);
   compiler.data("headingMeta", {
-    hasH1: false,
     headings: []
   });
   return compiler;
 };
 var rehypePrettyCodeOptions = {
   theme: theme_default,
-  onVisitHighlightedLine(node) {
-    if (!node.properties.className) {
-      node.properties.className = [];
+  onVisitLine(node) {
+    if (node.children.length === 0) {
+      node.children = [{ type: "text", value: " " }];
     }
+  },
+  onVisitHighlightedLine(node) {
     node.properties.className.push("highlighted");
   },
   onVisitHighlightedWord(node) {
-    if (!node.properties.className) {
-      node.properties.className = [];
-    }
-    node.properties.className.push("highlighted");
+    node.properties.className = ["highlighted"];
   }
 };
 function compileMdx(_0) {
-  return __async(this, arguments, function* (source, mdxOptions = {}, nextraOptions = {
-    unstable_staticImage: false,
-    unstable_flexsearch: false
-  }, resourcePath) {
-    let structurizedData = {};
+  return __async(this, arguments, function* (source, mdxOptions = {}, nextraOptions = {}, resourcePath = "") {
+    var _a;
+    const structurizedData = {};
     const compiler = createCompiler({
-      jsx: true,
+      jsx: (_a = mdxOptions.jsx) != null ? _a : true,
+      outputFormat: mdxOptions.outputFormat,
       providerImportSource: "@mdx-js/react",
       remarkPlugins: [
         ...mdxOptions.remarkPlugins || [],
@@ -634,6 +616,7 @@ function compileMdx(_0) {
         ...mdxOptions.rehypePlugins || [],
         parseMeta,
         [rehypePrettyCode, rehypePrettyCodeOptions],
+        [rehypeMdxTitle, { name: "titleText" }],
         attachMeta
       ].filter(Boolean)
     });
@@ -646,8 +629,8 @@ function compileMdx(_0) {
       });
     } catch (err) {
       console.error(`
-Error compiling ${resourcePath}`);
-      console.error(`${err}
+Error compiling ${resourcePath}
+${err}
 `);
       throw err;
     }
@@ -827,16 +810,7 @@ function loader(context, source) {
     if (!theme) {
       throw new Error("No Nextra theme found!");
     }
-    let pageMapResult, fileMap;
-    if (isProductionBuild) {
-      const data2 = pageMapCache2.get();
-      pageMapResult = data2.items;
-      fileMap = data2.fileMap;
-    } else {
-      const data2 = yield collectFiles(pagesDir, "/");
-      pageMapResult = data2.items;
-      fileMap = data2.fileMap;
-    }
+    const { items: pageMapResult, fileMap } = isProductionBuild ? pageMapCache2.get() : yield collectFiles(pagesDir, "/");
     const [pageMap, route, title] = getPageMap(resourcePath, pageMapResult, fileMap, defaultLocale);
     if (!isProductionBuild) {
       context.addContextDependency(pagesDir);
@@ -847,7 +821,7 @@ function loader(context, source) {
         }
       });
     }
-    let { data, content } = grayMatter2(source);
+    const { data, content } = grayMatter2(source);
     let layout = theme;
     let layoutConfig = themeConfig || null;
     if (theme.startsWith(".") || theme.startsWith("/")) {
@@ -859,15 +833,13 @@ function loader(context, source) {
     if (isProductionBuild && indexContentEmitted.has(filename)) {
       unstable_flexsearch = false;
     }
-    const { result, titleText, headings, hasH1, structurizedData } = yield compileMdx(content, mdxOptions, {
+    const { result, headings, structurizedData } = yield compileMdx(content, mdxOptions, {
       unstable_staticImage,
       unstable_flexsearch
     }, resourcePath);
-    content = result;
-    content = content.replace("export default MDXContent;", "");
     if (unstable_flexsearch) {
       if (extension2.test(filename) && data.searchable !== false) {
-        yield addPage({
+        addPage({
           fileLocale: fileLocale || "default",
           route,
           title,
@@ -893,34 +865,45 @@ function loader(context, source) {
       } catch (e) {
       }
     }
-    const prefix = `import __nextra_withLayout__ from '${layout}'
+    const loaderOptions = JSON.stringify({
+      newNextLinkBehavior: options.newNextLinkBehavior
+    });
+    const layoutConfigImport = layoutConfig ? `import __nextra_layoutConfig__ from '${layoutConfig}'` : "";
+    return `
+import __nextra_withLayout__ from '${layout}'
 import { withSSG as __nextra_withSSG__ } from 'nextra/ssg'
-${layoutConfig ? `import __nextra_layoutConfig__ from '${layoutConfig}'` : ""}
+${layoutConfigImport}
+${result.replace("export default MDXContent;", "")}
 
 const __nextra_pageMap__ = ${JSON.stringify(pageMap)}
+
 globalThis.__nextra_internal__ = {
   pageMap: __nextra_pageMap__,
-  route: ${JSON.stringify(route)},
+  route: ${JSON.stringify(route)}
 }
 
-    const __nextra_content__ = <MDXContent/>
-    const NextraLayout = __nextra_withSSG__(__nextra_withLayout__({
-      filename: "${slash2(filename)}",
-      route: "${slash2(route)}",
-      meta: ${JSON.stringify(data)},
-      pageMap: __nextra_pageMap__,
-      titleText: ${JSON.stringify(titleText)},
-      headings: ${JSON.stringify(headings)},
-      hasH1: ${JSON.stringify(hasH1)},
-      ${timestamp ? `timestamp: ${timestamp},
+const NextraLayout = __nextra_withSSG__(__nextra_withLayout__({
+  filename: "${slash2(filename)}",
+  route: "${slash2(route)}",
+  meta: ${JSON.stringify(data)},
+  pageMap: __nextra_pageMap__,
+  titleText: typeof titleText === 'string' ? titleText : undefined,
+  headings: ${JSON.stringify(headings)},
+  ${timestamp ? `timestamp: ${timestamp},
 ` : ""}
-    }, ${layoutConfig ? "__nextra_layoutConfig__" : "null"}))
-    `;
-    const suffix = `export default function NextraPage (props) {
-  return <NextraLayout {...props}>{__nextra_content__}</NextraLayout>
+}, ${layoutConfig ? `{...__nextra_layoutConfig__,...${loaderOptions}}` : loaderOptions}))
+
+function NextraPage(props) {
+  return (
+    <NextraLayout {...props}>
+      <MDXContent />
+    </NextraLayout>
+  )
 }
-NextraPage.getLayout = NextraLayout.getLayout`;
-    return prefix + "\n\n" + content + "\n\n" + suffix;
+NextraPage.getLayout = NextraLayout.getLayout
+
+export default NextraPage
+`.trimStart();
   });
 }
 function syncLoader(source, callback) {
diff --git a/node_modules/nextra/dist/locales.js b/node_modules/nextra/dist/locales.js
old mode 100644
new mode 100755
diff --git a/node_modules/nextra/dist/page-map.d.ts b/node_modules/nextra/dist/page-map.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/nextra/dist/plugin.d.ts b/node_modules/nextra/dist/plugin.d.ts
old mode 100644
new mode 100755
index ae1d17f..f7732e7
--- a/node_modules/nextra/dist/plugin.d.ts
+++ b/node_modules/nextra/dist/plugin.d.ts
@@ -1,4 +1,4 @@
-import { PageMapItem } from './types';
+import { NextraConfig, PageMapItem } from './types';
 import { Compiler } from 'webpack';
 export declare function collectFiles(dir: string, route?: string, fileMap?: Record<string, any>): Promise<{
     items: PageMapItem[];
@@ -21,9 +21,8 @@ export declare class PageMapCache {
     } | null;
 }
 export declare const pageMapCache: PageMapCache;
-declare class NextraPlugin {
-    config: any;
-    constructor(nextraConfig: any);
+export declare class NextraPlugin {
+    private config;
+    constructor(config: NextraConfig);
     apply(compiler: Compiler): void;
 }
-export { NextraPlugin };
diff --git a/node_modules/nextra/dist/ssg.js b/node_modules/nextra/dist/ssg.js
old mode 100644
new mode 100755
diff --git a/node_modules/nextra/dist/types.d.ts b/node_modules/nextra/dist/types.d.ts
old mode 100644
new mode 100755
index 9a63bef..189f9bc
--- a/node_modules/nextra/dist/types.d.ts
+++ b/node_modules/nextra/dist/types.d.ts
@@ -1,15 +1,12 @@
 import { Heading as MDASTHeading } from 'mdast';
 import { ProcessorOptions } from '@mdx-js/mdx';
 import { PageMapCache } from './plugin';
-export interface LoaderOptions {
-    theme: Theme;
-    themeConfig: string;
+export interface LoaderOptions extends NextraConfig {
     locales: string[];
     defaultLocale: string;
-    unstable_staticImage: boolean;
-    unstable_flexsearch: boolean;
     mdxOptions: Pick<ProcessorOptions, 'rehypePlugins' | 'remarkPlugins'>;
     pageMapCache: PageMapCache;
+    newNextLinkBehavior: boolean;
 }
 export interface PageMapItem {
     name: string;
@@ -31,7 +28,6 @@ export interface PageOpt {
     pageMap: PageMapItem[];
     titleText: string | null;
     headings?: Heading[];
-    hasH1: boolean;
 }
 export declare type PageMapResult = [
     pageMap: PageMapItem[],
diff --git a/node_modules/nextra/dist/utils.d.ts b/node_modules/nextra/dist/utils.d.ts
old mode 100644
new mode 100755
index adf3d93..6ab4e73
--- a/node_modules/nextra/dist/utils.d.ts
+++ b/node_modules/nextra/dist/utils.d.ts
@@ -1,5 +1,5 @@
-export declare function getLocaleFromFilename(name: string): string | undefined;
+export declare function getLocaleFromFilename(name: string): string | void;
 export declare function removeExtension(name: string): string;
 export declare function getFileName(resourcePath: string): string;
 export declare const parseJsonFile: (content: string, path: string) => Record<string, any>;
-export declare const existsSync: (f: string) => boolean;
+export declare const existsSync: (filePath: string) => boolean;
diff --git a/node_modules/nextra/index.js b/node_modules/nextra/index.js
deleted file mode 100755
index aae5903..0000000
--- a/node_modules/nextra/index.js
+++ /dev/null
@@ -1 +0,0 @@
-module.exports = require('./dist/index')
diff --git a/node_modules/nextra/loader.js b/node_modules/nextra/loader.js
index b7d9ded..5283c07 100755
--- a/node_modules/nextra/loader.js
+++ b/node_modules/nextra/loader.js
@@ -10,7 +10,7 @@
 module.exports = function (code) {
   const callback = this.async()
   // Note that `import()` caches, so this should be fast enough.
-  import('./dist/loader.mjs').then(module =>
-    module.default.call(this, code, callback)
+  import('./dist/loader.mjs').then(mod =>
+    mod.default.call(this, code, callback)
   )
 }
diff --git a/node_modules/nextra/locales.js b/node_modules/nextra/locales.js
deleted file mode 100644
index 0adc2a7..0000000
--- a/node_modules/nextra/locales.js
+++ /dev/null
@@ -1 +0,0 @@
-module.exports = require('./dist/locales')
diff --git a/node_modules/nextra/package.json b/node_modules/nextra/package.json
index 47e2096..c7e64f1 100644
--- a/node_modules/nextra/package.json
+++ b/node_modules/nextra/package.json
@@ -5,19 +5,23 @@
   "main": "index.js",
   "files": [
     "dist/*",
-    "index.js",
-    "ssg.js",
-    "data.js",
-    "loader.js",
-    "locales.js",
-    "context.js"
+    "loader.js"
   ],
+  "exports": {
+    ".": "./dist/index.js",
+    "./compile": "./dist/compile.mjs",
+    "./context": "./dist/context.js",
+    "./data": "./dist/ssg.js",
+    "./loader": "./loader.js",
+    "./locales": "./dist/locales.js",
+    "./ssg": "./dist/ssg.js"
+  },
   "types": "./dist/types.d.ts",
   "repository": "https://github.com/shuding/nextra",
   "license": "MIT",
   "scripts": {
     "build": "node scripts/build.js",
-    "dev": "node scripts/dev.js",
+    "dev": "node scripts/build.js --dev",
     "types": "tsc --project tsconfig.type.json",
     "test": "vitest run",
     "prepublishOnly": "rm -rf dist && pnpm build && pnpm types"
@@ -28,7 +32,7 @@
     "github-slugger": "^1.4.0",
     "graceful-fs": "^4.2.6",
     "gray-matter": "^4.0.3",
-    "p-limit": "^4.0.0",
+    "rehype-mdx-title": "^1.0.0",
     "rehype-pretty-code": "^0.1.0",
     "remark-gfm": "^3.0.1",
     "shiki": "0.10.1",
diff --git a/node_modules/nextra/ssg.js b/node_modules/nextra/ssg.js
deleted file mode 100755
index 9016f08..0000000
--- a/node_modules/nextra/ssg.js
+++ /dev/null
@@ -1 +0,0 @@
-module.exports = require('./dist/ssg')
