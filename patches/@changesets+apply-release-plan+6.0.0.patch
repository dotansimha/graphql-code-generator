diff --git a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js
index 477552c..3f6fa1a 100644
--- a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js
+++ b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js
@@ -64,7 +64,7 @@ function shouldUpdateDependencyBasedOnConfig(release, {depVersionRange: depVersi
 
 const DEPENDENCY_TYPES = [ "dependencies", "devDependencies", "peerDependencies", "optionalDependencies" ];
 
-function versionPackage(release, versionsToUpdate, {updateInternalDependencies: updateInternalDependencies, onlyUpdatePeerDependentsWhenOutOfRange: onlyUpdatePeerDependentsWhenOutOfRange, bumpVersionsWithWorkspaceProtocolOnly: bumpVersionsWithWorkspaceProtocolOnly}) {
+function versionPackage(release, versionsToUpdate, {updateInternalDependencies, onlyUpdatePeerDependentsWhenOutOfRange, bumpVersionsWithWorkspaceProtocolOnly, ignoreRange}) {
   let {newVersion: newVersion, packageJson: packageJson} = release;
   packageJson.version = newVersion;
   for (let depType of DEPENDENCY_TYPES) {
@@ -89,7 +89,7 @@ function versionPackage(release, versionsToUpdate, {updateInternalDependencies:
           depCurrentVersion = workspaceDepVersion;
         }
         if ("" !== new semver__default.default.Range(depCurrentVersion).range || null !== semver__default.default.prerelease(version)) {
-          let newNewRange = `${getVersionRangeType__default.default(depCurrentVersion)}${version}`;
+          let newNewRange = ignoreRange ? version : `${getVersionRangeType__default.default(depCurrentVersion)}${version}`;
           usesWorkspaceRange && (newNewRange = "workspace:" + newNewRange), deps[name] = newNewRange;
         }
       }
@@ -156,7 +156,7 @@ async function getCommitsThatAddChangesets(changesetIds, cwd) {
   })), commits;
 }
 
-async function applyReleasePlan(releasePlan, packages, config$1 = config.defaultConfig, snapshot) {
+async function applyReleasePlan(releasePlan, packages, config$1 = config.defaultConfig, snapshot, ignoreRange) {
   let cwd = packages.root.dir, touchedFiles = [];
   const packagesByName = new Map(packages.packages.map((x => [ x.packageJson.name, x ])));
   let {releases: releases, changesets: changesets} = releasePlan, releasesWithPackage = releases.map((release => {
@@ -170,6 +170,7 @@ async function applyReleasePlan(releasePlan, packages, config$1 = config.default
     version: newVersion,
     type: type
   }))), finalisedRelease = releaseWithChangelogs.map((release => versionPackage(release, versionsToUpdate, {
+    ignoreRange,
     updateInternalDependencies: config$1.updateInternalDependencies,
     onlyUpdatePeerDependentsWhenOutOfRange: config$1.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange,
     bumpVersionsWithWorkspaceProtocolOnly: config$1.bumpVersionsWithWorkspaceProtocolOnly
diff --git a/node_modules/@changesets/apply-release-plan/dist/declarations/src/index.d.ts b/node_modules/@changesets/apply-release-plan/dist/declarations/src/index.d.ts
index db7ebee..9bde9bb 100644
--- a/node_modules/@changesets/apply-release-plan/dist/declarations/src/index.d.ts
+++ b/node_modules/@changesets/apply-release-plan/dist/declarations/src/index.d.ts
@@ -1,3 +1,3 @@
 import { ReleasePlan, Config } from "@changesets/types";
 import { Packages } from "@manypkg/get-packages";
-export default function applyReleasePlan(releasePlan: ReleasePlan, packages: Packages, config?: Config, snapshot?: string | boolean): Promise<string[]>;
+export default function applyReleasePlan(releasePlan: ReleasePlan, packages: Packages, config?: Config, snapshot?: string | boolean, ignoreRange?: boolean): Promise<string[]>;
