diff --git a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js
index 8ff4e32..a7ee2fb 100644
--- a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js
+++ b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js
@@ -62,7 +62,8 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 const DEPENDENCY_TYPES = ["dependencies", "devDependencies", "peerDependencies", "optionalDependencies"];
 function versionPackage(release, versionsToUpdate, {
   updateInternalDependencies,
-  onlyUpdatePeerDependentsWhenOutOfRange
+  onlyUpdatePeerDependentsWhenOutOfRange,
+  ignoreRange
 }) {
   let {
     newVersion,
@@ -102,7 +103,7 @@ function versionPackage(release, versionsToUpdate, {
         // they probably want it to stay like that
         new semver.Range(depCurrentVersion).range !== "") {
           let rangeType = getVersionRangeType(depCurrentVersion);
-          let newNewRange = `${rangeType}${version}`;
+          let newNewRange = ignoreRange ? version : `${rangeType}${version}`;
           if (usesWorkspaceRange) newNewRange = `workspace:${newNewRange}`;
           deps[name] = newNewRange;
         }
@@ -207,7 +208,7 @@ async function getCommitThatAddsChangeset(changesetId, cwd) {
   }
 }
 
-async function applyReleasePlan(releasePlan, packages, config$1 = config.defaultConfig, snapshot) {
+async function applyReleasePlan(releasePlan, packages, config$1 = config.defaultConfig, snapshot, ignoreRange = false) {
   let cwd = packages.root.dir;
   let touchedFiles = [];
   const packagesByName = new Map(packages.packages.map(x => [x.packageJson.name, x]));
@@ -245,6 +246,7 @@ async function applyReleasePlan(releasePlan, packages, config$1 = config.default
   let finalisedRelease = releaseWithChangelogs.map(release => {
     return versionPackage(release, versionsToUpdate, {
       updateInternalDependencies: config$1.updateInternalDependencies,
+      ignoreRange,
       onlyUpdatePeerDependentsWhenOutOfRange: config$1.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange
     });
   });
diff --git a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js
index 772a26d..b1f5f4e 100644
--- a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js
+++ b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js
@@ -60,7 +60,7 @@ function _defineProperty(obj, key, value) {
 
 const DEPENDENCY_TYPES = [ "dependencies", "devDependencies", "peerDependencies", "optionalDependencies" ];
 
-function versionPackage(release, versionsToUpdate, {updateInternalDependencies: updateInternalDependencies, onlyUpdatePeerDependentsWhenOutOfRange: onlyUpdatePeerDependentsWhenOutOfRange}) {
+function versionPackage(release, versionsToUpdate, {ignoreRange, updateInternalDependencies: updateInternalDependencies, onlyUpdatePeerDependentsWhenOutOfRange: onlyUpdatePeerDependentsWhenOutOfRange}) {
   let {newVersion: newVersion, packageJson: packageJson} = release;
   packageJson.version = newVersion;
   for (let depType of DEPENDENCY_TYPES) {
@@ -79,7 +79,7 @@ function versionPackage(release, versionsToUpdate, {updateInternalDependencies:
       })) continue;
       const usesWorkspaceRange = depCurrentVersion.startsWith("workspace:");
       if (usesWorkspaceRange && (depCurrentVersion = depCurrentVersion.substr(10)), "" !== new semver.Range(depCurrentVersion).range) {
-        let newNewRange = `${getVersionRangeType(depCurrentVersion)}${version}`;
+        let newNewRange = ignoreRange ? version : `${getVersionRangeType(depCurrentVersion)}${version}`;
         usesWorkspaceRange && (newNewRange = `workspace:${newNewRange}`), deps[name] = newNewRange;
       }
     }
@@ -178,7 +178,7 @@ async function getCommitThatAddsChangeset(changesetId, cwd) {
   return commitForOldChangeset || void 0;
 }
 
-async function applyReleasePlan(releasePlan, packages, config$1 = config.defaultConfig, snapshot) {
+async function applyReleasePlan(releasePlan, packages, config$1 = config.defaultConfig, snapshot, ignoreRange = false) {
   let cwd = packages.root.dir, touchedFiles = [];
   const packagesByName = new Map(packages.packages.map(x => [ x.packageJson.name, x ]));
   let {releases: releases, changesets: changesets} = releasePlan;
@@ -195,6 +195,7 @@ async function applyReleasePlan(releasePlan, packages, config$1 = config.default
     type: type
   })), finalisedRelease = releaseWithChangelogs.map(release => versionPackage(release, versionsToUpdate, {
     updateInternalDependencies: config$1.updateInternalDependencies,
+    ignoreRange,
     onlyUpdatePeerDependentsWhenOutOfRange: config$1.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange
   })), prettierConfig = await prettier.resolveConfig(cwd);
   for (let release of finalisedRelease) {
