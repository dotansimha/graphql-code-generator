diff --git a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js
index 4bbfe2e..3ab17bc 100644
--- a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js
+++ b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js
@@ -96,7 +96,8 @@ function shouldUpdateDependencyBasedOnConfig(release, {
   depType
 }, {
   minReleaseType,
-  onlyUpdatePeerDependentsWhenOutOfRange
+  onlyUpdatePeerDependentsWhenOutOfRange,
+  ignoreRange
 }) {
   if (!semver__default['default'].satisfies(release.version, depVersionRange)) {
     // Dependencies leaving semver range should always be updated
@@ -116,6 +117,7 @@ function shouldUpdateDependencyBasedOnConfig(release, {
 const DEPENDENCY_TYPES = ["dependencies", "devDependencies", "peerDependencies", "optionalDependencies"];
 function versionPackage(release, versionsToUpdate, {
   updateInternalDependencies,
+  ignoreRange,
   onlyUpdatePeerDependentsWhenOutOfRange,
   bumpVersionsWithWorkspaceProtocolOnly
 }) {
@@ -173,7 +175,7 @@ function versionPackage(release, versionsToUpdate, {
         // leaving those as is would leave the package in a non-installable state (wrong dep versions would get installed)
         semver__default['default'].prerelease(version) !== null) {
           let rangeType = getVersionRangeType__default['default'](depCurrentVersion);
-          let newNewRange = `${rangeType}${version}`;
+          let newNewRange = ignoreRange ? version : `${rangeType}${version}`;
           if (usesWorkspaceRange) newNewRange = `workspace:${newNewRange}`;
           deps[name] = newNewRange;
         }
@@ -287,7 +289,7 @@ async function getCommitsThatAddChangesets(changesetIds, cwd) {
   return commits;
 }
 
-async function applyReleasePlan(releasePlan, packages, config$1 = config.defaultConfig, snapshot) {
+async function applyReleasePlan(releasePlan, packages, config$1 = config.defaultConfig, snapshot, ignoreRange = false) {
   let cwd = packages.root.dir;
   let touchedFiles = [];
   const packagesByName = new Map(packages.packages.map(x => [x.packageJson.name, x]));
@@ -325,6 +327,7 @@ async function applyReleasePlan(releasePlan, packages, config$1 = config.default
   let finalisedRelease = releaseWithChangelogs.map(release => {
     return versionPackage(release, versionsToUpdate, {
       updateInternalDependencies: config$1.updateInternalDependencies,
+      ignoreRange,
       onlyUpdatePeerDependentsWhenOutOfRange: config$1.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange,
       bumpVersionsWithWorkspaceProtocolOnly: config$1.bumpVersionsWithWorkspaceProtocolOnly
     });
