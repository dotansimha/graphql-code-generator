{{#each operations }}
export namespace {{ toPascalCase name }} {
  export type Variables = {
  {{#each variables}}
    {{ name }}: {{ toPrimitive type }}{{#if isArray}}[]{{/if}}{{#unless isRequired}} | null{{/unless}};
  {{/each}}
  }

  export type {{ toPascalCase operationType }} ={{#if hasFields}} {
    __typename?: "{{ toPascalCase operationType }}";
    {{> selectionSet fields }}
  }{{/if}}{{> fragments this }}
  {{#each innerModels }}

  export type {{ modelType }} ={{#if hasFields}} {
  {{#unless hasInlineFragments}}
    __typename?: "{{ schemaBaseType }}";
  {{else}}
    __typename?: {{#each inlineFragments}}{{onType}}["__typename"]{{#unless @last}} | {{/unless}}{{/each}};
  {{/unless}}
    {{> selectionSet fields }}
  }{{/if}}{{> fragments this }}
  {{/each}}
}
{{/each}}
{{#each fragments }}

export namespace {{name}} {
  export type Fragment ={{#if hasFields}} {
    __typename?: "{{ onType }}";
    {{> selectionSet fields }}
  }{{/if}}{{> fragments this }}
  {{#each innerModels }}

  export type {{ modelType }} ={{#if hasFields}} {
  {{#unless hasInlineFragments}}
    __typename?: "{{ schemaBaseType }}";
  {{else}}
    __typename?: {{#each inlineFragments}}{{onType}}["__typename"]{{#unless @last}} | {{/unless}}{{/each}};
  {{/unless}}
    {{> selectionSet fields }}
  }{{/if}}{{> fragments this }}
  {{/each}}
}
{{/each}}

