{{{ blockCommentIf 'Documents' operations }}}
{{#each operations }}

{{#unless @root.config.noNamespaces}}
export namespace {{ convert name 'typeNames' }} {
{{/unless}}
  export type {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}Variables = {
  {{#each variables}}
    {{#if @root.config.immutableTypes }}readonly {{/if}}{{ name }}{{ getOptionals this }}: {{ convertedType this }};
  {{/each}}
  }
  export type {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}{{ convert operationType 'typeNames'}} = {{#if hasFields}} {
    {{#if @root.config.immutableTypes }}readonly {{/if}}__typename?: "{{ convert operationType 'typeNames' }}";
    {{#each fields }}
    {{name}}: Maybe<{{> selectionSetPick }}>
    {{/each }}
  }
  {{/if}}

  {{!-- export type {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}{{ convert operationType 'typeNames' }} ={{#if hasFields}} {
    {{#if @root.config.immutableTypes }}readonly {{/if}}__typename?: "{{ convert operationType 'typeNames' }}";
    {{> selectionSet fields=fields prefix=name }}
  }{{/if}}{{{ fragments this name ../fragments }}}
  {{#each innerModels }}

  export type {{#if @root.config.noNamespaces}}{{ convert ../name 'typeNames' }}{{/if}}{{ convert modelType 'typeNames' }} ={{#if hasFields}} {
  {{#unless hasInlineFragments}}
    {{#if @root.config.immutableTypes }}readonly {{/if}}__typename{{#unless hasTypename}}?{{/unless}}: "{{ schemaBaseType }}";
  {{else}}
    {{#if @root.config.immutableTypes }}readonly {{/if}}__typename{{#unless hasTypename}}?{{/unless}}: {{#each inlineFragments}}{{#if @root.config.noNamespaces}}{{ convert ../../name 'typeNames' }}{{/if}}{{name}}["__typename"]{{#unless @last}} | {{/unless}}{{/each}};
  {{/unless}}
    {{> selectionSet fields=fields prefix=../name }}
  }{{/if}} {{{ fragments this ../name ../../fragments }}}
  {{/each}}
{{#unless @root.config.noNamespaces}}
}
{{/unless}}
{{/each}}
{{#each fragments }}

{{#unless @root.config.noNamespaces}}
export namespace {{ convert name 'typeNames' }} {
{{/unless}}
  export type {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}Fragment ={{#if hasFields}} {
    {{#if @root.config.immutableTypes }}readonly {{/if}}__typename?: "{{ onType }}";
    {{> selectionSet fields=fields prefix=name }}
  }{{/if}}{{{ fragments this name ../fragments }}}
  {{#each innerModels }}

  export type {{#if @root.config.noNamespaces}}{{ convert ../name 'typeNames' }}{{/if}}{{ convert modelType 'typeNames' }} ={{#if hasFields}} {
  {{#unless hasInlineFragments}}
    {{#if @root.config.immutableTypes }}readonly {{/if}}__typename{{#unless hasTypename}}?{{/unless}}: "{{ schemaBaseType }}";
  {{else}}
    {{#if @root.config.immutableTypes }}readonly {{/if}}__typename{{#unless hasTypename}}?{{/unless}}: {{#each inlineFragments}}{{#if @root.config.noNamespaces}}{{ convert ../name 'typeNames' }}{{/if}}{{name}}["__typename"]{{#unless @last}} | {{/unless}}{{/each}};
  {{/unless}}
    {{> selectionSet fields=fields prefix=../name }}
  }{{/if}}{{{ fragments this ../name ../../fragments }}}
  {{/each}} --}}
{{#unless @root.config.noNamespaces}}
}
{{/unless}}
{{/each}}

