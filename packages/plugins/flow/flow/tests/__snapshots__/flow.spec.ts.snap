// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Flow Plugin Arguments Should add custom prefix for mutation arguments 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export type TInput = {|
  name?: ?$ElementType<Scalars, 'String'>,
|};

export type TMutation = {|
  __typename?: 'Mutation',
  foo?: ?$ElementType<Scalars, 'String'>,
|};


export type TMutationFooArgs = {|
  id?: ?$ElementType<Scalars, 'String'>,
  input?: ?TInput,
|};
"
`;

exports[`Flow Plugin Arguments Should add custom suffix for mutation arguments 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export type InputT = {|
  name?: ?$ElementType<Scalars, 'String'>,
|};

export type MutationT = {|
  __typename?: 'Mutation',
  foo?: ?$ElementType<Scalars, 'String'>,
|};


export type MutationFooArgsT = {|
  id?: ?$ElementType<Scalars, 'String'>,
  input?: ?InputT,
|};
"
`;

exports[`Flow Plugin Arguments Should generate correctly types for field arguments - with basic fields 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export type MyType = {|
  __typename?: 'MyType',
  foo?: ?$ElementType<Scalars, 'String'>,
|};


export type MyTypeFooArgs = {|
  a: $ElementType<Scalars, 'String'>,
  b?: ?$ElementType<Scalars, 'String'>,
  c?: ?Array<?$ElementType<Scalars, 'String'>>,
  d: Array<$ElementType<Scalars, 'Int'>>,
|};
"
`;

exports[`Flow Plugin Arguments Should generate correctly types for field arguments - with default value 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export type MyType = {|
  __typename?: 'MyType',
  foo?: ?$ElementType<Scalars, 'String'>,
|};


export type MyTypeFooArgs = {|
  a: $ElementType<Scalars, 'String'>,
  b: $ElementType<Scalars, 'String'>,
  c?: ?$ElementType<Scalars, 'String'>,
|};
"
`;

exports[`Flow Plugin Arguments Should generate correctly types for field arguments - with input type 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export type MyInput = {|
  f?: ?$ElementType<Scalars, 'String'>,
|};

export type MyType = {|
  __typename?: 'MyType',
  foo?: ?$ElementType<Scalars, 'String'>,
|};


export type MyTypeFooArgs = {|
  a?: ?MyInput,
  b: MyInput,
  c?: ?Array<?MyInput>,
  d: Array<?MyInput>,
  e: Array<MyInput>,
|};
"
`;

exports[`Flow Plugin Input Object Should build input types correctly, also with array, mutlti-dimensional arrays, non-null and custom types 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export type MyType = {|
  __typename?: 'MyType',
  foo?: ?$ElementType<Scalars, 'String'>,
|};

export type MyInput = {|
  a: $ElementType<Scalars, 'String'>,
  b?: ?$ElementType<Scalars, 'Int'>,
  c?: ?MyType,
  d: MyType,
  e?: ?Array<?$ElementType<Scalars, 'String'>>,
  f: Array<?$ElementType<Scalars, 'String'>>,
  g: Array<$ElementType<Scalars, 'String'>>,
  h?: ?Array<$ElementType<Scalars, 'String'>>,
  i?: ?Array<?Array<?$ElementType<Scalars, 'String'>>>,
  j?: ?Array<?Array<?Array<?$ElementType<Scalars, 'String'>>>>,
  k: Array<?Array<?$ElementType<Scalars, 'String'>>>,
  l: Array<Array<$ElementType<Scalars, 'String'>>>,
|};
"
`;

exports[`Flow Plugin Interface Should build interface correctly 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export type MyInterface = {|
  foo?: ?$ElementType<Scalars, 'String'>,
  bar: $ElementType<Scalars, 'String'>,
|};
"
`;

exports[`Flow Plugin Issues Issue #1645 - Input type fields does not have optional sign 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export type Mutation = {|
  __typename?: 'Mutation',
  updateUser: User,
|};


export type MutationUpdateUserArgs = {|
  userId: $ElementType<Scalars, 'ID'>,
  update?: ?UpdateUser,
|};

export type User = {|
  __typename?: 'User',
  id: $ElementType<Scalars, 'ID'>,
  username: $ElementType<Scalars, 'String'>,
  email: $ElementType<Scalars, 'String'>,
|};

export type UpdateUser = {|
  username?: ?$ElementType<Scalars, 'String'>,
  email?: ?$ElementType<Scalars, 'String'>,
|};
"
`;

exports[`Flow Plugin Naming Convention & Types Prefix Should generate correct values when using links between types - lowerCase 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export const myenumvalues = Object.freeze({
  a: 'A',
  b: 'B',
  c: 'C'
});


export type myenum = $Values<typeof myenumvalues>;

export type mytype = {|
  __typename?: 'MyType',
  f?: ?$ElementType<Scalars, 'String'>,
  bar?: ?myenum,
  b_a_r?: ?$ElementType<Scalars, 'String'>,
  myOtherField?: ?$ElementType<Scalars, 'String'>,
|};

export type my_type = {|
  __typename?: 'My_Type',
  linkTest?: ?mytype,
|};

export type myunion = my_type | mytype;

export type some_interface = {|
  id: $ElementType<Scalars, 'ID'>,
|};

export type impl1 = {|
  ...some_interface,
  ...{|
    __typename?: 'Impl1',
    id: $ElementType<Scalars, 'ID'>,
  |}
|};

export type impl_2 = {|
  ...some_interface,
  ...{|
    __typename?: 'Impl_2',
    id: $ElementType<Scalars, 'ID'>,
  |}
|};

export type impl_3 = {|
  ...some_interface,
  ...{|
    __typename?: 'impl_3',
    id: $ElementType<Scalars, 'ID'>,
  |}
|};

export type query = {|
  __typename?: 'Query',
  something?: ?myunion,
  use_interface?: ?some_interface,
|};
"
`;

exports[`Flow Plugin Naming Convention & Types Prefix Should generate correct values when using links between types - pascalCase (default) 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export const MyEnumValues = Object.freeze({
  A: 'A',
  B: 'B',
  C: 'C'
});


export type MyEnum = $Values<typeof MyEnumValues>;

export type MyType = {|
  __typename?: 'MyType',
  f?: ?$ElementType<Scalars, 'String'>,
  bar?: ?MyEnum,
  b_a_r?: ?$ElementType<Scalars, 'String'>,
  myOtherField?: ?$ElementType<Scalars, 'String'>,
|};

export type My_Type = {|
  __typename?: 'My_Type',
  linkTest?: ?MyType,
|};

export type MyUnion = My_Type | MyType;

export type Some_Interface = {|
  id: $ElementType<Scalars, 'ID'>,
|};

export type Impl1 = {|
  ...Some_Interface,
  ...{|
    __typename?: 'Impl1',
    id: $ElementType<Scalars, 'ID'>,
  |}
|};

export type Impl_2 = {|
  ...Some_Interface,
  ...{|
    __typename?: 'Impl_2',
    id: $ElementType<Scalars, 'ID'>,
  |}
|};

export type Impl_3 = {|
  ...Some_Interface,
  ...{|
    __typename?: 'impl_3',
    id: $ElementType<Scalars, 'ID'>,
  |}
|};

export type Query = {|
  __typename?: 'Query',
  something?: ?MyUnion,
  use_interface?: ?Some_Interface,
|};
"
`;

exports[`Flow Plugin Naming Convention & Types Prefix Should generate correct values when using links between types - pascalCase (default) with custom prefix 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export const IMyEnumValues = Object.freeze({
  A: 'A',
  B: 'B',
  C: 'C'
});


export type IMyEnum = $Values<typeof IMyEnumValues>;

export type IMyType = {|
  __typename?: 'MyType',
  f?: ?$ElementType<Scalars, 'String'>,
  bar?: ?IMyEnum,
  b_a_r?: ?$ElementType<Scalars, 'String'>,
  myOtherField?: ?$ElementType<Scalars, 'String'>,
|};

export type IMy_Type = {|
  __typename?: 'My_Type',
  linkTest?: ?IMyType,
|};

export type IMyUnion = IMy_Type | IMyType;

export type ISome_Interface = {|
  id: $ElementType<Scalars, 'ID'>,
|};

export type IImpl1 = {|
  ...ISome_Interface,
  ...{|
    __typename?: 'Impl1',
    id: $ElementType<Scalars, 'ID'>,
  |}
|};

export type IImpl_2 = {|
  ...ISome_Interface,
  ...{|
    __typename?: 'Impl_2',
    id: $ElementType<Scalars, 'ID'>,
  |}
|};

export type IImpl_3 = {|
  ...ISome_Interface,
  ...{|
    __typename?: 'impl_3',
    id: $ElementType<Scalars, 'ID'>,
  |}
|};

export type IQuery = {|
  __typename?: 'Query',
  something?: ?IMyUnion,
  use_interface?: ?ISome_Interface,
|};
"
`;

exports[`Flow Plugin Naming Convention & Types Prefix Should remove underscore from enum values 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export const MyEnumValues = Object.freeze({
  MyValue: 'My_Value',
  MyOtherValue: '_MyOtherValue'
});


export type MyEnum = $Values<typeof MyEnumValues>;
"
`;

exports[`Flow Plugin Naming Convention & Types Prefix Should use custom namingConvention and add custom prefix 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export type Imytype = {|
  __typename?: 'MyType',
  foo?: ?$ElementType<Scalars, 'String'>,
|};


export type Imytypefooargs = {|
  a: $ElementType<Scalars, 'String'>,
  b?: ?$ElementType<Scalars, 'String'>,
  c?: ?Array<?$ElementType<Scalars, 'String'>>,
  d: Array<$ElementType<Scalars, 'Int'>>,
|};
"
`;

exports[`Flow Plugin Naming Convention & Types Prefix Should use custom namingConvention for type name and args typename 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export type mytype = {|
  __typename?: 'MyType',
  foo?: ?$ElementType<Scalars, 'String'>,
|};


export type mytypefooargs = {|
  a: $ElementType<Scalars, 'String'>,
  b?: ?$ElementType<Scalars, 'String'>,
  c?: ?Array<?$ElementType<Scalars, 'String'>>,
  d: Array<$ElementType<Scalars, 'Int'>>,
|};
"
`;

exports[`Flow Plugin Object Should build type correctly 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export type MyType = {|
  __typename?: 'MyType',
  foo?: ?$ElementType<Scalars, 'String'>,
  bar: $ElementType<Scalars, 'String'>,
|};
"
`;

exports[`Flow Plugin Object Should build type correctly when implementing interface 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export type MyInterface = {|
  foo: $ElementType<Scalars, 'String'>,
|};

export type MyType = {|
  ...MyInterface,
  ...{|
    __typename?: 'MyType',
    foo: $ElementType<Scalars, 'String'>,
  |}
|};
"
`;

exports[`Flow Plugin Object Should build type correctly when implementing multiple interfaces 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export type MyInterface = {|
  foo: $ElementType<Scalars, 'String'>,
|};

export type MyOtherInterface = {|
  bar: $ElementType<Scalars, 'String'>,
|};

export type MyType = {|
  ...MyInterface,
  ...MyOtherInterface,
  ...{|
    __typename?: 'MyType',
    foo: $ElementType<Scalars, 'String'>,
    bar: $ElementType<Scalars, 'String'>,
  |}
|};
"
`;

exports[`Flow Plugin Object Should build type correctly with links between types 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export type MyType = {|
  __typename?: 'MyType',
  foo: MyOtherType,
|};

export type MyOtherType = {|
  __typename?: 'MyOtherType',
  bar: $ElementType<Scalars, 'String'>,
|};
"
`;

exports[`Flow Plugin Output options Should respect flow option useFlowReadOnlyTypes 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export type MyInterface = {|
  +foo?: ?$ElementType<Scalars, 'String'>,
  +bar: $ElementType<Scalars, 'String'>,
|};

export const MyEnumValues = Object.freeze({
  A: 'A',
  B: 'B',
  C: 'C'
});


export type MyEnum = $Values<typeof MyEnumValues>;
"
`;

exports[`Flow Plugin Scalars Should build basic scalar correctly as any 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
  A: any,
|};

"
`;

exports[`Flow Plugin Scalars Should build enum correctly with custom values 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
  A: MyCustomType,
|};

"
`;

exports[`Flow Plugin Union Should build union as type correctly 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export type MyType = {|
  __typename?: 'MyType',
  foo: $ElementType<Scalars, 'String'>,
|};

export type MyOtherType = {|
  __typename?: 'MyOtherType',
  bar: $ElementType<Scalars, 'String'>,
|};

export type MyUnion = MyType | MyOtherType;
"
`;

exports[`Flow Plugin description to comment Should include a description for Scalars type 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
  /** My custom scalar */
  A: any,
|};

"
`;

exports[`Flow Plugin description to comment Should work with inteface and inteface fields 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

export type Node = {|
  /** the id */
  id: $ElementType<Scalars, 'ID'>,
|};
"
`;

exports[`Flow Plugin description to comment Test for issue #1508 1`] = `
"/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
|};

/** New user account input fields */
export type SignUpDetails = {|
  /** First name */
  firstName: $ElementType<Scalars, 'String'>,
  /** Last name */
  lastName: $ElementType<Scalars, 'String'>,
  /** Email address */
  email: $ElementType<Scalars, 'String'>,
  /** User role */
  role: $ElementType<Scalars, 'String'>,
  /** A legit and secure password */
  password: $ElementType<Scalars, 'String'>,
  /** Repeat password */
  passwordRepeat: $ElementType<Scalars, 'String'>,
  /** Language */
  language?: ?$ElementType<Scalars, 'String'>,
  /** Timezone */
  timezone?: ?$ElementType<Scalars, 'String'>,
  /** CAPTCHA verification code */
  captcha?: ?$ElementType<Scalars, 'String'>,
|};
"
`;
