// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Flow Resolvers Plugin Should generate basic type resolvers 1`] = `
Object {
  "content": "export type Resolver<Result, Parent = {}, Context = {}, Args = {}> = (
  parent: Parent,
  args: Args,
  context: Context,
  info: GraphQLResolveInfo
) => Promise<Result> | Result;

export type SubscriptionSubscribeFn<Result, Parent, Context, Args> = (
  parent: Parent,
  args: Args,
  context: Context,
  info: GraphQLResolveInfo
) => AsyncIterator<Result> | Promise<AsyncIterator<Result>>;

export type SubscriptionResolveFn<Result, Parent, Context, Args> = (
  parent: Parent,
  args: Args,
  context: Context,
  info: GraphQLResolveInfo
) => Result | Promise<Result>;

export interface SubscriptionSubscriberObject<Result, Key: string, Parent, Context, Args> {
  subscribe: SubscriptionSubscribeFn<{ [key: Key]: Result }, Parent, Context, Args>;
  resolve?: SubscriptionResolveFn<Result, { [key: Key]: Result }, Context, Args>;
}

export interface SubscriptionResolverObject<Result, Parent, Context, Args> {
  subscribe: SubscriptionSubscribeFn<mixed, Parent, Context, Args>;
  resolve: SubscriptionResolveFn<Result, mixed, Context, Args>;
}

export type SubscriptionObject<Result, Key: string, Parent, Context, Args> =
  | SubscriptionSubscriberObject<Result, Key, Parent, Context, Args>
  | SubscriptionResolverObject<Result, Parent, Context, Args>;

export type SubscriptionResolver<Result, Key: string, Parent = {}, Context = {}, Args = {}> =
  | ((...args: Array<any>) => SubscriptionObject<Result, Key, Parent, Context, Args>)
  | SubscriptionObject<Result, Key, Parent, Context, Args>;

export type TypeResolveFn<Types, Parent = {}, Context = {}> = (
  parent: Parent,
  context: Context,
  info: GraphQLResolveInfo
) => ?Types | Promise<?Types>;

export type IsTypeOfResolverFn<T = {}> = (obj: T, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<Result = {}, Parent = {}, Args = {}, Context = {}> = (
  next: NextResolverFn<Result>,
  parent: Parent,
  args: Args,
  context: Context,
  info: GraphQLResolveInfo
) => Result | Promise<Result>;

export type ResolverTypeWrapper<T> = Promise<T> | T;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  MyType: ResolverTypeWrapper<MyType>,
  String: ResolverTypeWrapper<$ElementType<Scalars, 'String'>>,
  MyOtherType: ResolverTypeWrapper<MyOtherType>,
  Query: ResolverTypeWrapper<{}>,
  Subscription: ResolverTypeWrapper<{}>,
  Node: $ElementType<ResolversTypes, 'SomeNode'>,
  ID: ResolverTypeWrapper<$ElementType<Scalars, 'ID'>>,
  SomeNode: ResolverTypeWrapper<SomeNode>,
  MyUnion: $ElementType<ResolversTypes, 'MyType'> | $ElementType<ResolversTypes, 'MyOtherType'>,
  MyScalar: ResolverTypeWrapper<$ElementType<Scalars, 'MyScalar'>>,
  Int: ResolverTypeWrapper<$ElementType<Scalars, 'Int'>>,
  Boolean: ResolverTypeWrapper<$ElementType<Scalars, 'Boolean'>>,
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  MyType: MyType,
  String: $ElementType<Scalars, 'String'>,
  MyOtherType: MyOtherType,
  Query: {},
  Subscription: {},
  Node: $ElementType<ResolversParentTypes, 'SomeNode'>,
  ID: $ElementType<Scalars, 'ID'>,
  SomeNode: SomeNode,
  MyUnion: $ElementType<ResolversParentTypes, 'MyType'> | $ElementType<ResolversParentTypes, 'MyOtherType'>,
  MyScalar: $ElementType<Scalars, 'MyScalar'>,
  Int: $ElementType<Scalars, 'Int'>,
  Boolean: $ElementType<Scalars, 'Boolean'>,
};

export type MyDirectiveDirectiveArgs = {   arg: $ElementType<Scalars, 'Int'>,
  arg2: $ElementType<Scalars, 'String'>,
  arg3: $ElementType<Scalars, 'Boolean'>, };

export type MyDirectiveDirectiveResolver<Result, Parent, ContextType = any, Args = MyDirectiveDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type MyTypeResolvers<ContextType = any, ParentType = $ElementType<ResolversParentTypes, 'MyType'>> = {
  foo?: Resolver<$ElementType<ResolversTypes, 'String'>, ParentType, ContextType>,
  otherType?: Resolver<?$ElementType<ResolversTypes, 'MyOtherType'>, ParentType, ContextType>,
  withArgs?: Resolver<?$ElementType<ResolversTypes, 'String'>, ParentType, ContextType, $RequireFields<MyTypeWithArgsArgs, { arg2: * }>>,
  __isTypeOf?: IsTypeOfResolverFn<ParentType>,
};

export type MyOtherTypeResolvers<ContextType = any, ParentType = $ElementType<ResolversParentTypes, 'MyOtherType'>> = {
  bar?: Resolver<$ElementType<ResolversTypes, 'String'>, ParentType, ContextType>,
  __isTypeOf?: IsTypeOfResolverFn<ParentType>,
};

export type QueryResolvers<ContextType = any, ParentType = $ElementType<ResolversParentTypes, 'Query'>> = {
  something?: Resolver<$ElementType<ResolversTypes, 'MyType'>, ParentType, ContextType>,
};

export type SubscriptionResolvers<ContextType = any, ParentType = $ElementType<ResolversParentTypes, 'Subscription'>> = {
  somethingChanged?: SubscriptionResolver<?$ElementType<ResolversTypes, 'MyOtherType'>, \\"somethingChanged\\", ParentType, ContextType>,
};

export type NodeResolvers<ContextType = any, ParentType = $ElementType<ResolversParentTypes, 'Node'>> = {
  __resolveType: TypeResolveFn<'SomeNode', ParentType, ContextType>,
  id?: Resolver<$ElementType<ResolversTypes, 'ID'>, ParentType, ContextType>,
};

export type SomeNodeResolvers<ContextType = any, ParentType = $ElementType<ResolversParentTypes, 'SomeNode'>> = {
  id?: Resolver<$ElementType<ResolversTypes, 'ID'>, ParentType, ContextType>,
  __isTypeOf?: IsTypeOfResolverFn<ParentType>,
};

export type MyUnionResolvers<ContextType = any, ParentType = $ElementType<ResolversParentTypes, 'MyUnion'>> = {
  __resolveType: TypeResolveFn<'MyType' | 'MyOtherType', ParentType, ContextType>,
};

export type MyScalarScalarConfig = {
  ...GraphQLScalarTypeConfig<$ElementType<ResolversTypes, 'MyScalar'>, any>, 
  name: 'MyScalar'
};

export type Resolvers<ContextType = any> = {
  MyType?: MyTypeResolvers<ContextType>,
  MyOtherType?: MyOtherTypeResolvers<ContextType>,
  Query?: QueryResolvers<ContextType>,
  Subscription?: SubscriptionResolvers<ContextType>,
  Node?: NodeResolvers<>,
  SomeNode?: SomeNodeResolvers<ContextType>,
  MyUnion?: MyUnionResolvers<>,
  MyScalar?: GraphQLScalarType<>,
};


/**
 * @deprecated
 * Use \\"Resolvers\\" root object instead. If you wish to get \\"IResolvers\\", add \\"typesPrefix: I\\" to your config.
 */
export type IResolvers<ContextType = any> = Resolvers<ContextType>;
export type DirectiveResolvers<ContextType = any> = {
  myDirective?: MyDirectiveDirectiveResolver<any, any, ContextType>,
};


/**
 * @deprecated
 * Use \\"DirectiveResolvers\\" root object instead. If you wish to get \\"IDirectiveResolvers\\", add \\"typesPrefix: I\\" to your config.
 */
export type IDirectiveResolvers<ContextType = any> = DirectiveResolvers<ContextType>;",
  "prepend": Array [
    "import { type GraphQLResolveInfo } from 'graphql';",
    "export type $RequireFields<Origin, Keys> = $Diff<Origin, Keys> & $ObjMapi<Keys, <Key>(k: Key) => $NonMaybeType<$ElementType<Origin, Key>>>;",
  ],
}
`;
