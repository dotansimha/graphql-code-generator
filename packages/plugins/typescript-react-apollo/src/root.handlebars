{{#ifCond operations.length '!==' 0}}
{{{getImports}}}
{{#unless @root.config.noGraphqlTag}}
{{{gqlImport this}}};
{{/unless}}

{{ blockCommentIf 'Fragments' fragments }}
{{{generateFragments fragments}}}

{{ blockCommentIf 'Components' operations }}
{{#each operations }}
    {{#unless @root.config.noNamespaces}}
export namespace {{convert name 'typeNames' }} {
    {{/unless}}    
    export const {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}Document = {{{ gql this }}};
    {{#if @root.config.withComponents}}
     export class {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}Component extends React.Component<Partial<ReactApollo.{{ convert operationType 'typeNames' }}Props<{{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}{{ convert operationType 'typeNames' }}, {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}Variables>>> {
        render(){
            return (
                <ReactApollo.{{ convert operationType 'typeNames' }}<{{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}{{convert operationType 'typeNames' }}, {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}Variables>
                {{ toLowerCase operationType }}={ {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}Document }
                {...(this as any)['props'] as any}
                />
            );
        }
    }
    {{/if}}
    {{#if @root.config.withHOC}}
    export type {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}Props<TChildProps = any> = {{{propsType this}}} & TChildProps;
    {{#ifCond operationType '===' 'mutation'}}
    export type {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}MutationFn = ReactApollo.MutationFn<{{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}{{convert operationType 'typeNames'}}, {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}Variables>;
    {{/ifCond}}
    export function {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}HOC<TProps, TChildProps = any>(operationOptions: 
            ReactApollo.OperationOption<
                TProps, 
                {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}{{convert operationType 'typeNames'}},
                {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}Variables,
                {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}Props<TChildProps>
            > | undefined){
        return ReactApollo.graphql<TProps, {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}{{convert operationType 'typeNames' }}, {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}Variables, {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}Props<TChildProps>>(
            {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}Document,
            operationOptions
        );
    };
    {{/if}}
    {{#if @root.config.withHooks}}
    export function use{{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}(baseOptions?: ReactApolloHooks.{{convert operationType 'typeNames'}}HookOptions<
            {{#ifCond operationType '!==' 'query'}}{{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}{{convert operationType 'typeNames'}},
            {{/ifCond}}{{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}Variables
        >) {
        return ReactApolloHooks.use{{convert operationType 'typeNames'}}<
            {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}{{convert operationType 'typeNames'}},
            {{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}Variables
        >({{#if @root.config.noNamespaces}}{{ convert name 'typeNames' }}{{/if}}Document, baseOptions);
    };
    {{/if}}
    {{#unless @root.config.noNamespaces}}
}
    {{/unless}}
{{/each}}
{{/ifCond}}
