// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`urql graphcache Should output the cache-generic correctly (with interfaces) 1`] = `
"import { Resolver as GraphCacheResolver, UpdateResolver as GraphCacheUpdateResolver, OptimisticMutationResolver as GraphCacheOptimisticMutationResolver } from '@urql/exchange-graphcache';
type RequireFields<T, K extends keyof T> = { [X in Exclude<keyof T, K>]?: T[X] } & { [P in K]-?: NonNullable<T[P]> };

type GraphCacheKeysConfig = {
  Author?: (data: RequireFields<Author, '__typename'>) => null | string,
  Todo?: (data: RequireFields<Todo, '__typename'>) => null | string,
  Textbook?: (data: RequireFields<Textbook, '__typename'>) => null | string
}

type GraphCacheResolvers = {
  Query?: {
    schoolBooks?: GraphCacheResolver<RequireFields<Query, '__typename'>, null, Array<RequireFields<Textbook, '__typename'> | string>>
  },
  Author?: {
    id?: GraphCacheResolver<RequireFields<Author, '__typename'>, null, Scalars['ID']>,
    name?: GraphCacheResolver<RequireFields<Author, '__typename'>, null, Scalars['String']>,
    friends?: GraphCacheResolver<RequireFields<Author, '__typename'>, null, Array<RequireFields<Author, '__typename'> | string>>,
    friendsPaginated?: GraphCacheResolver<RequireFields<Author, '__typename'>, AuthorFriendsPaginatedArgs, Array<RequireFields<Author, '__typename'> | string>>
  },
  Todo?: {
    id?: GraphCacheResolver<RequireFields<Todo, '__typename'>, null, Scalars['ID']>,
    text?: GraphCacheResolver<RequireFields<Todo, '__typename'>, null, Scalars['String']>,
    complete?: GraphCacheResolver<RequireFields<Todo, '__typename'>, null, Scalars['Boolean']>,
    author?: GraphCacheResolver<RequireFields<Todo, '__typename'>, null, RequireFields<Author, '__typename'> | string>
  },
  Textbook?: {
    id?: GraphCacheResolver<RequireFields<Textbook, '__typename'>, null, Scalars['ID']>,
    title?: GraphCacheResolver<RequireFields<Textbook, '__typename'>, null, Scalars['String']>,
    author?: GraphCacheResolver<RequireFields<Textbook, '__typename'>, null, RequireFields<Author, '__typename'> | string>,
    todo?: GraphCacheResolver<RequireFields<Textbook, '__typename'>, null, RequireFields<Todo, '__typename'> | string>
  }
};

type GraphCacheOptimisticUpdaters = {
  {}
};

type GraphCacheUpdaters = {
  Mutation?: {},
  Subscription?: {},
};

export type GraphCacheConfig = {
  updates: GraphCacheUpdaters,
  keys: GraphCacheKeysConfig,
  optimistic: GraphCacheOptimisticUpdaters,
  resolvers: GraphCacheResolvers
};"
`;

exports[`urql graphcache Should output the cache-generic correctly (with unions) 1`] = `
"import { Resolver as GraphCacheResolver, UpdateResolver as GraphCacheUpdateResolver, OptimisticMutationResolver as GraphCacheOptimisticMutationResolver } from '@urql/exchange-graphcache';
type RequireFields<T, K extends keyof T> = { [X in Exclude<keyof T, K>]?: T[X] } & { [P in K]-?: NonNullable<T[P]> };

type GraphCacheKeysConfig = {
  Book?: (data: RequireFields<Book, '__typename'>) => null | string,
  Movie?: (data: RequireFields<Movie, '__typename'>) => null | string
}

type GraphCacheResolvers = {
  Query?: {
    media?: GraphCacheResolver<RequireFields<Query, '__typename'>, null, Array<RequireFields<Media, '__typename'> | string>>
  },
  Book?: {
    id?: GraphCacheResolver<RequireFields<Book, '__typename'>, null, Scalars['ID']>,
    title?: GraphCacheResolver<RequireFields<Book, '__typename'>, null, Scalars['String']>,
    pages?: GraphCacheResolver<RequireFields<Book, '__typename'>, null, Scalars['Int']>
  },
  Movie?: {
    id?: GraphCacheResolver<RequireFields<Movie, '__typename'>, null, Scalars['ID']>,
    title?: GraphCacheResolver<RequireFields<Movie, '__typename'>, null, Scalars['String']>,
    duration?: GraphCacheResolver<RequireFields<Movie, '__typename'>, null, Scalars['Int']>
  }
};

type GraphCacheOptimisticUpdaters = {
  updateMedia?: GraphCacheOptimisticMutationResolver<MutationUpdateMediaArgs, Maybe<RequireFields<Media, '__typename'>>>
};

type GraphCacheUpdaters = {
  Mutation?: {
    updateMedia?: GraphCacheUpdateResolver<{ updateMedia: Maybe<RequireFields<Media, '__typename'>> }, MutationUpdateMediaArgs>
  },
  Subscription?: {},
};

export type GraphCacheConfig = {
  updates: GraphCacheUpdaters,
  keys: GraphCacheKeysConfig,
  optimistic: GraphCacheOptimisticUpdaters,
  resolvers: GraphCacheResolvers
};"
`;

exports[`urql graphcache Should output the cache-generic correctly 1`] = `
"import { Resolver as GraphCacheResolver, UpdateResolver as GraphCacheUpdateResolver, OptimisticMutationResolver as GraphCacheOptimisticMutationResolver } from '@urql/exchange-graphcache';
type RequireFields<T, K extends keyof T> = { [X in Exclude<keyof T, K>]?: T[X] } & { [P in K]-?: NonNullable<T[P]> };

type GraphCacheKeysConfig = {
  Author?: (data: RequireFields<Author, '__typename'>) => null | string,
  Todo?: (data: RequireFields<Todo, '__typename'>) => null | string
}

type GraphCacheResolvers = {
  Query?: {
    todos?: GraphCacheResolver<RequireFields<Query, '__typename'>, null, Array<RequireFields<Todo, '__typename'> | string>>
  },
  Author?: {
    id?: GraphCacheResolver<RequireFields<Author, '__typename'>, null, Scalars['ID']>,
    name?: GraphCacheResolver<RequireFields<Author, '__typename'>, null, Scalars['String']>,
    friends?: GraphCacheResolver<RequireFields<Author, '__typename'>, null, Array<RequireFields<Author, '__typename'> | string>>,
    friendsPaginated?: GraphCacheResolver<RequireFields<Author, '__typename'>, AuthorFriendsPaginatedArgs, Array<RequireFields<Author, '__typename'> | string>>
  },
  Todo?: {
    id?: GraphCacheResolver<RequireFields<Todo, '__typename'>, null, Scalars['ID']>,
    text?: GraphCacheResolver<RequireFields<Todo, '__typename'>, null, Scalars['String']>,
    complete?: GraphCacheResolver<RequireFields<Todo, '__typename'>, null, Scalars['Boolean']>,
    author?: GraphCacheResolver<RequireFields<Todo, '__typename'>, null, RequireFields<Author, '__typename'> | string>
  }
};

type GraphCacheOptimisticUpdaters = {
  toggleTodo?: GraphCacheOptimisticMutationResolver<MutationToggleTodoArgs, RequireFields<Todo, '__typename'>>,
  toggleTodos?: GraphCacheOptimisticMutationResolver<MutationToggleTodosArgs, Array<RequireFields<Todo, '__typename'>>>,
  toggleTodosOptionalArray?: GraphCacheOptimisticMutationResolver<MutationToggleTodosOptionalArrayArgs, Maybe<Array<RequireFields<Todo, '__typename'>>>>,
  toggleTodosOptionalEntity?: GraphCacheOptimisticMutationResolver<MutationToggleTodosOptionalEntityArgs, Array<RequireFields<Todo, '__typename'>>>,
  toggleTodosOptional?: GraphCacheOptimisticMutationResolver<MutationToggleTodosOptionalArgs, Maybe<Array<RequireFields<Todo, '__typename'>>>>
};

type GraphCacheUpdaters = {
  Mutation?: {
    toggleTodo?: GraphCacheUpdateResolver<{ toggleTodo: RequireFields<Todo, '__typename'> }, MutationToggleTodoArgs>,
    toggleTodos?: GraphCacheUpdateResolver<{ toggleTodos: Array<RequireFields<Todo, '__typename'>> }, MutationToggleTodosArgs>,
    toggleTodosOptionalArray?: GraphCacheUpdateResolver<{ toggleTodosOptionalArray: Maybe<Array<RequireFields<Todo, '__typename'>>> }, MutationToggleTodosOptionalArrayArgs>,
    toggleTodosOptionalEntity?: GraphCacheUpdateResolver<{ toggleTodosOptionalEntity: Array<RequireFields<Todo, '__typename'>> }, MutationToggleTodosOptionalEntityArgs>,
    toggleTodosOptional?: GraphCacheUpdateResolver<{ toggleTodosOptional: Maybe<Array<RequireFields<Todo, '__typename'>>> }, MutationToggleTodosOptionalArgs>
  },
  Subscription?: {},
};

export type GraphCacheConfig = {
  updates: GraphCacheUpdaters,
  keys: GraphCacheKeysConfig,
  optimistic: GraphCacheOptimisticUpdaters,
  resolvers: GraphCacheResolvers
};"
`;
