// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`urql graphcache Should output the cache-generic correctly (with interfaces) 1`] = `
"import { Resolver as GraphCacheResolver, UpdateResolver as GraphCacheUpdateResolver, OptimisticMutationResolver as GraphCacheOptimisticMutationResolver } from '@urql/exchange-graphcache';
export type WithTypename<T extends { __typename?: any }> = { [K in Exclude<keyof T, '__typename'>]?: T[K] } & { __typename: NonNullable<T['__typename']> };

export type GraphCacheKeysConfig = {
  Author?: (data: WithTypename<Author>) => null | string,
  Todo?: (data: WithTypename<Todo>) => null | string,
  Textbook?: (data: WithTypename<Textbook>) => null | string
}

export type GraphCacheResolvers = {
  Query?: {
    schoolBooks?: GraphCacheResolver<WithTypename<Query>, null, Array<WithTypename<Textbook> | string>>
  },
  Author?: {
    id?: GraphCacheResolver<WithTypename<Author>, null, Scalars['ID'] | string>,
    name?: GraphCacheResolver<WithTypename<Author>, null, Scalars['String'] | string>,
    friends?: GraphCacheResolver<WithTypename<Author>, null, Array<WithTypename<Author> | string>>,
    friendsPaginated?: GraphCacheResolver<WithTypename<Author>, AuthorFriendsPaginatedArgs, Array<WithTypename<Author> | string>>
  },
  Todo?: {
    id?: GraphCacheResolver<WithTypename<Todo>, null, Scalars['ID'] | string>,
    text?: GraphCacheResolver<WithTypename<Todo>, null, Scalars['String'] | string>,
    complete?: GraphCacheResolver<WithTypename<Todo>, null, Scalars['Boolean'] | string>,
    author?: GraphCacheResolver<WithTypename<Todo>, null, WithTypename<Author> | string>
  },
  Textbook?: {
    id?: GraphCacheResolver<WithTypename<Textbook>, null, Scalars['ID'] | string>,
    title?: GraphCacheResolver<WithTypename<Textbook>, null, Scalars['String'] | string>,
    author?: GraphCacheResolver<WithTypename<Textbook>, null, WithTypename<Author> | string>,
    todo?: GraphCacheResolver<WithTypename<Textbook>, null, WithTypename<Todo> | string>
  }
};

export type GraphCacheOptimisticUpdaters = {
  {}
};

export type GraphCacheUpdaters = {
  Mutation?: {},
  Subscription?: {},
};

export type GraphCacheConfig = {
  updates?: GraphCacheUpdaters,
  keys?: GraphCacheKeysConfig,
  optimistic?: GraphCacheOptimisticUpdaters,
  resolvers?: GraphCacheResolvers
};"
`;

exports[`urql graphcache Should output the cache-generic correctly (with unions) 1`] = `
"import { Resolver as GraphCacheResolver, UpdateResolver as GraphCacheUpdateResolver, OptimisticMutationResolver as GraphCacheOptimisticMutationResolver } from '@urql/exchange-graphcache';
export type WithTypename<T extends { __typename?: any }> = { [K in Exclude<keyof T, '__typename'>]?: T[K] } & { __typename: NonNullable<T['__typename']> };

export type GraphCacheKeysConfig = {
  Book?: (data: WithTypename<Book>) => null | string,
  Movie?: (data: WithTypename<Movie>) => null | string
}

export type GraphCacheResolvers = {
  Query?: {
    media?: GraphCacheResolver<WithTypename<Query>, null, Array<WithTypename<Media> | string>>
  },
  Book?: {
    id?: GraphCacheResolver<WithTypename<Book>, null, Scalars['ID'] | string>,
    title?: GraphCacheResolver<WithTypename<Book>, null, Scalars['String'] | string>,
    pages?: GraphCacheResolver<WithTypename<Book>, null, Scalars['Int'] | string>
  },
  Movie?: {
    id?: GraphCacheResolver<WithTypename<Movie>, null, Scalars['ID'] | string>,
    title?: GraphCacheResolver<WithTypename<Movie>, null, Scalars['String'] | string>,
    duration?: GraphCacheResolver<WithTypename<Movie>, null, Scalars['Int'] | string>
  }
};

export type GraphCacheOptimisticUpdaters = {
  updateMedia?: GraphCacheOptimisticMutationResolver<MutationUpdateMediaArgs, Maybe<WithTypename<Media>>>
};

export type GraphCacheUpdaters = {
  Mutation?: {
    updateMedia?: GraphCacheUpdateResolver<{ updateMedia: Maybe<WithTypename<Media>> }, MutationUpdateMediaArgs>
  },
  Subscription?: {},
};

export type GraphCacheConfig = {
  updates?: GraphCacheUpdaters,
  keys?: GraphCacheKeysConfig,
  optimistic?: GraphCacheOptimisticUpdaters,
  resolvers?: GraphCacheResolvers
};"
`;

exports[`urql graphcache Should output the cache-generic correctly 1`] = `
"import { Resolver as GraphCacheResolver, UpdateResolver as GraphCacheUpdateResolver, OptimisticMutationResolver as GraphCacheOptimisticMutationResolver } from '@urql/exchange-graphcache';
export type WithTypename<T extends { __typename?: any }> = { [K in Exclude<keyof T, '__typename'>]?: T[K] } & { __typename: NonNullable<T['__typename']> };

export type GraphCacheKeysConfig = {
  Author?: (data: WithTypename<Author>) => null | string,
  Todo?: (data: WithTypename<Todo>) => null | string
}

export type GraphCacheResolvers = {
  Query?: {
    todos?: GraphCacheResolver<WithTypename<Query>, null, Array<WithTypename<Todo> | string>>
  },
  Author?: {
    id?: GraphCacheResolver<WithTypename<Author>, null, Scalars['ID'] | string>,
    name?: GraphCacheResolver<WithTypename<Author>, null, Scalars['String'] | string>,
    friends?: GraphCacheResolver<WithTypename<Author>, null, Array<WithTypename<Author> | string>>,
    friendsPaginated?: GraphCacheResolver<WithTypename<Author>, AuthorFriendsPaginatedArgs, Array<WithTypename<Author> | string>>
  },
  Todo?: {
    id?: GraphCacheResolver<WithTypename<Todo>, null, Scalars['ID'] | string>,
    text?: GraphCacheResolver<WithTypename<Todo>, null, Scalars['String'] | string>,
    complete?: GraphCacheResolver<WithTypename<Todo>, null, Scalars['Boolean'] | string>,
    author?: GraphCacheResolver<WithTypename<Todo>, null, WithTypename<Author> | string>
  }
};

export type GraphCacheOptimisticUpdaters = {
  toggleTodo?: GraphCacheOptimisticMutationResolver<MutationToggleTodoArgs, WithTypename<Todo>>,
  toggleTodos?: GraphCacheOptimisticMutationResolver<MutationToggleTodosArgs, Array<WithTypename<Todo>>>,
  toggleTodosOptionalArray?: GraphCacheOptimisticMutationResolver<MutationToggleTodosOptionalArrayArgs, Maybe<Array<WithTypename<Todo>>>>,
  toggleTodosOptionalEntity?: GraphCacheOptimisticMutationResolver<MutationToggleTodosOptionalEntityArgs, Array<WithTypename<Todo>>>,
  toggleTodosOptional?: GraphCacheOptimisticMutationResolver<MutationToggleTodosOptionalArgs, Maybe<Array<WithTypename<Todo>>>>
};

export type GraphCacheUpdaters = {
  Mutation?: {
    toggleTodo?: GraphCacheUpdateResolver<{ toggleTodo: WithTypename<Todo> }, MutationToggleTodoArgs>,
    toggleTodos?: GraphCacheUpdateResolver<{ toggleTodos: Array<WithTypename<Todo>> }, MutationToggleTodosArgs>,
    toggleTodosOptionalArray?: GraphCacheUpdateResolver<{ toggleTodosOptionalArray: Maybe<Array<WithTypename<Todo>>> }, MutationToggleTodosOptionalArrayArgs>,
    toggleTodosOptionalEntity?: GraphCacheUpdateResolver<{ toggleTodosOptionalEntity: Array<WithTypename<Todo>> }, MutationToggleTodosOptionalEntityArgs>,
    toggleTodosOptional?: GraphCacheUpdateResolver<{ toggleTodosOptional: Maybe<Array<WithTypename<Todo>>> }, MutationToggleTodosOptionalArgs>
  },
  Subscription?: {},
};

export type GraphCacheConfig = {
  updates?: GraphCacheUpdaters,
  keys?: GraphCacheKeysConfig,
  optimistic?: GraphCacheOptimisticUpdaters,
  resolvers?: GraphCacheResolvers
};"
`;
