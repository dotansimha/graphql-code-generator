// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generic-sdk sdk Should generate a correct wrap method 1`] = `
"export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };
import { DocumentNode } from 'graphql';
import gql from 'graphql-tag';
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  /** A feed of repository submissions */
  feed?: Maybe<Array<Maybe<Entry>>>;
  /** A single entry */
  entry?: Maybe<Entry>;
  /** Return the currently logged in user, or null if nobody is logged in */
  currentUser?: Maybe<User>;
};


export type QueryFeedArgs = {
  type: FeedType;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
};


export type QueryEntryArgs = {
  repoFullName: Scalars['String'];
};

/** A list of options for the sort order of the feed */
export enum FeedType {
  /** Sort by a combination of freshness and score, using Reddit's algorithm */
  Hot = 'HOT',
  /** Newest entries first */
  New = 'NEW',
  /** Highest score entries first */
  Top = 'TOP'
}

/** Information about a GitHub repository submitted to GitHunt */
export type Entry = {
  __typename?: 'Entry';
  /** Information about the repository from GitHub */
  repository: Repository;
  /** The GitHub user who submitted this entry */
  postedBy: User;
  /** A timestamp of when the entry was submitted */
  createdAt: Scalars['Float'];
  /** The score of this repository, upvotes - downvotes */
  score: Scalars['Int'];
  /** The hot score of this repository */
  hotScore: Scalars['Float'];
  /** Comments posted about this repository */
  comments: Array<Maybe<Comment>>;
  /** The number of comments posted about this repository */
  commentCount: Scalars['Int'];
  /** The SQL ID of this entry */
  id: Scalars['Int'];
  /** XXX to be changed */
  vote: Vote;
};


/** Information about a GitHub repository submitted to GitHunt */
export type EntryCommentsArgs = {
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};

/**
 * A repository object from the GitHub API. This uses the exact field names returned by the
 * GitHub API for simplicity, even though the convention for GraphQL is usually to camel case.
 */
export type Repository = {
  __typename?: 'Repository';
  /** Just the name of the repository, e.g. GitHunt-API */
  name: Scalars['String'];
  /** The full name of the repository with the username, e.g. apollostack/GitHunt-API */
  full_name: Scalars['String'];
  /** The description of the repository */
  description?: Maybe<Scalars['String']>;
  /** The link to the repository on GitHub */
  html_url: Scalars['String'];
  /** The number of people who have starred this repository on GitHub */
  stargazers_count: Scalars['Int'];
  /** The number of open issues on this repository on GitHub */
  open_issues_count?: Maybe<Scalars['Int']>;
  /** The owner of this repository on GitHub, e.g. apollostack */
  owner?: Maybe<User>;
};

/** A user object from the GitHub API. This uses the exact field names returned from the GitHub API. */
export type User = {
  __typename?: 'User';
  /** The name of the user, e.g. apollostack */
  login: Scalars['String'];
  /** The URL to a directly embeddable image for this user's avatar */
  avatar_url: Scalars['String'];
  /** The URL of this user's GitHub page */
  html_url: Scalars['String'];
};

/** A comment about an entry, submitted by a user */
export type Comment = {
  __typename?: 'Comment';
  /** The SQL ID of this entry */
  id: Scalars['Int'];
  /** The GitHub user who posted the comment */
  postedBy: User;
  /** A timestamp of when the comment was posted */
  createdAt: Scalars['Float'];
  /** The text of the comment */
  content: Scalars['String'];
  /** The repository which this comment is about */
  repoName: Scalars['String'];
};

/** XXX to be removed */
export type Vote = {
  __typename?: 'Vote';
  vote_value: Scalars['Int'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Submit a new repository, returns the new submission */
  submitRepository?: Maybe<Entry>;
  /** Vote on a repository submission, returns the submission that was voted on */
  vote?: Maybe<Entry>;
  /** Comment on a repository, returns the new comment */
  submitComment?: Maybe<Comment>;
};


export type MutationSubmitRepositoryArgs = {
  repoFullName: Scalars['String'];
};


export type MutationVoteArgs = {
  repoFullName: Scalars['String'];
  type: VoteType;
};


export type MutationSubmitCommentArgs = {
  repoFullName: Scalars['String'];
  commentContent: Scalars['String'];
};

/** The type of vote to record, when submitting a vote */
export enum VoteType {
  Up = 'UP',
  Down = 'DOWN',
  Cancel = 'CANCEL'
}

export type Subscription = {
  __typename?: 'Subscription';
  /** Subscription fires on every comment added */
  commentAdded?: Maybe<Comment>;
};


export type SubscriptionCommentAddedArgs = {
  repoFullName: Scalars['String'];
};
export type FeedQueryVariables = Exact<{ [key: string]: never; }>;


export type FeedQuery = (
  { __typename?: 'Query' }
  & { feed?: Maybe<Array<Maybe<(
    { __typename?: 'Entry' }
    & Pick<Entry, 'id' | 'commentCount'>
    & { repository: (
      { __typename?: 'Repository' }
      & { owner?: Maybe<(
        { __typename?: 'User' }
        & Pick<User, 'avatar_url'>
      )> }
    ) }
  )>>> }
);

export type Feed2QueryVariables = Exact<{
  v: Scalars['String'];
}>;


export type Feed2Query = (
  { __typename?: 'Query' }
  & { feed?: Maybe<Array<Maybe<(
    { __typename?: 'Entry' }
    & Pick<Entry, 'id'>
  )>>> }
);

export type Feed3QueryVariables = Exact<{
  v?: Maybe<Scalars['String']>;
}>;


export type Feed3Query = (
  { __typename?: 'Query' }
  & { feed?: Maybe<Array<Maybe<(
    { __typename?: 'Entry' }
    & Pick<Entry, 'id'>
  )>>> }
);

export type Feed4QueryVariables = Exact<{
  v?: Scalars['String'];
}>;


export type Feed4Query = (
  { __typename?: 'Query' }
  & { feed?: Maybe<Array<Maybe<(
    { __typename?: 'Entry' }
    & Pick<Entry, 'id'>
  )>>> }
);

export const FeedDocument = gql\`
    query feed {
  feed {
    id
    commentCount
    repository {
      owner {
        avatar_url
      }
    }
  }
}
    \`;
export const Feed2Document = gql\`
    query feed2($v: String!) {
  feed {
    id
  }
}
    \`;
export const Feed3Document = gql\`
    query feed3($v: String) {
  feed {
    id
  }
}
    \`;
export const Feed4Document = gql\`
    query feed4($v: String! = \\"TEST\\") {
  feed {
    id
  }
}
    \`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
export function getSdk<C>(requester: Requester<C>) {
  return {
    feed(variables?: FeedQueryVariables, options?: C): Promise<FeedQuery> {
      return requester<FeedQuery, FeedQueryVariables>(FeedDocument, variables, options);
    },
    feed2(variables: Feed2QueryVariables, options?: C): Promise<Feed2Query> {
      return requester<Feed2Query, Feed2QueryVariables>(Feed2Document, variables, options);
    },
    feed3(variables?: Feed3QueryVariables, options?: C): Promise<Feed3Query> {
      return requester<Feed3Query, Feed3QueryVariables>(Feed3Document, variables, options);
    },
    feed4(variables?: Feed4QueryVariables, options?: C): Promise<Feed4Query> {
      return requester<Feed4Query, Feed4QueryVariables>(Feed4Document, variables, options);
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;
async function test() {
  const requester = <R, V> (doc: DocumentNode, vars: V): Promise<R> => Promise.resolve({} as unknown as R);
  const sdk = getSdk(requester);

  await sdk.feed();
  await sdk.feed3();
  await sdk.feed4();

  const result = await sdk.feed2({ v: \\"1\\" });

  if (result.feed) {
    if (result.feed[0]) {
      const id = result.feed[0].id
    }
  }
}"
`;

exports[`generic-sdk sdk Should generate a correct wrap method when usingObservableFrom is set 1`] = `
"export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };
import Observable from 'zen-observable';
import { DocumentNode } from 'graphql';
import gql from 'graphql-tag';
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  /** A feed of repository submissions */
  feed?: Maybe<Array<Maybe<Entry>>>;
  /** A single entry */
  entry?: Maybe<Entry>;
  /** Return the currently logged in user, or null if nobody is logged in */
  currentUser?: Maybe<User>;
};


export type QueryFeedArgs = {
  type: FeedType;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
};


export type QueryEntryArgs = {
  repoFullName: Scalars['String'];
};

/** A list of options for the sort order of the feed */
export enum FeedType {
  /** Sort by a combination of freshness and score, using Reddit's algorithm */
  Hot = 'HOT',
  /** Newest entries first */
  New = 'NEW',
  /** Highest score entries first */
  Top = 'TOP'
}

/** Information about a GitHub repository submitted to GitHunt */
export type Entry = {
  __typename?: 'Entry';
  /** Information about the repository from GitHub */
  repository: Repository;
  /** The GitHub user who submitted this entry */
  postedBy: User;
  /** A timestamp of when the entry was submitted */
  createdAt: Scalars['Float'];
  /** The score of this repository, upvotes - downvotes */
  score: Scalars['Int'];
  /** The hot score of this repository */
  hotScore: Scalars['Float'];
  /** Comments posted about this repository */
  comments: Array<Maybe<Comment>>;
  /** The number of comments posted about this repository */
  commentCount: Scalars['Int'];
  /** The SQL ID of this entry */
  id: Scalars['Int'];
  /** XXX to be changed */
  vote: Vote;
};


/** Information about a GitHub repository submitted to GitHunt */
export type EntryCommentsArgs = {
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};

/**
 * A repository object from the GitHub API. This uses the exact field names returned by the
 * GitHub API for simplicity, even though the convention for GraphQL is usually to camel case.
 */
export type Repository = {
  __typename?: 'Repository';
  /** Just the name of the repository, e.g. GitHunt-API */
  name: Scalars['String'];
  /** The full name of the repository with the username, e.g. apollostack/GitHunt-API */
  full_name: Scalars['String'];
  /** The description of the repository */
  description?: Maybe<Scalars['String']>;
  /** The link to the repository on GitHub */
  html_url: Scalars['String'];
  /** The number of people who have starred this repository on GitHub */
  stargazers_count: Scalars['Int'];
  /** The number of open issues on this repository on GitHub */
  open_issues_count?: Maybe<Scalars['Int']>;
  /** The owner of this repository on GitHub, e.g. apollostack */
  owner?: Maybe<User>;
};

/** A user object from the GitHub API. This uses the exact field names returned from the GitHub API. */
export type User = {
  __typename?: 'User';
  /** The name of the user, e.g. apollostack */
  login: Scalars['String'];
  /** The URL to a directly embeddable image for this user's avatar */
  avatar_url: Scalars['String'];
  /** The URL of this user's GitHub page */
  html_url: Scalars['String'];
};

/** A comment about an entry, submitted by a user */
export type Comment = {
  __typename?: 'Comment';
  /** The SQL ID of this entry */
  id: Scalars['Int'];
  /** The GitHub user who posted the comment */
  postedBy: User;
  /** A timestamp of when the comment was posted */
  createdAt: Scalars['Float'];
  /** The text of the comment */
  content: Scalars['String'];
  /** The repository which this comment is about */
  repoName: Scalars['String'];
};

/** XXX to be removed */
export type Vote = {
  __typename?: 'Vote';
  vote_value: Scalars['Int'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Submit a new repository, returns the new submission */
  submitRepository?: Maybe<Entry>;
  /** Vote on a repository submission, returns the submission that was voted on */
  vote?: Maybe<Entry>;
  /** Comment on a repository, returns the new comment */
  submitComment?: Maybe<Comment>;
};


export type MutationSubmitRepositoryArgs = {
  repoFullName: Scalars['String'];
};


export type MutationVoteArgs = {
  repoFullName: Scalars['String'];
  type: VoteType;
};


export type MutationSubmitCommentArgs = {
  repoFullName: Scalars['String'];
  commentContent: Scalars['String'];
};

/** The type of vote to record, when submitting a vote */
export enum VoteType {
  Up = 'UP',
  Down = 'DOWN',
  Cancel = 'CANCEL'
}

export type Subscription = {
  __typename?: 'Subscription';
  /** Subscription fires on every comment added */
  commentAdded?: Maybe<Comment>;
};


export type SubscriptionCommentAddedArgs = {
  repoFullName: Scalars['String'];
};
export type FeedQueryVariables = Exact<{ [key: string]: never; }>;


export type FeedQuery = (
  { __typename?: 'Query' }
  & { feed?: Maybe<Array<Maybe<(
    { __typename?: 'Entry' }
    & Pick<Entry, 'id'>
  )>>> }
);

export type CommentAddedSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type CommentAddedSubscription = (
  { __typename?: 'Subscription' }
  & { commentAdded?: Maybe<(
    { __typename?: 'Comment' }
    & Pick<Comment, 'id'>
  )> }
);

export const FeedDocument = gql\`
    query feed {
  feed {
    id
  }
}
    \`;
export const CommentAddedDocument = gql\`
    subscription commentAdded {
  commentAdded {
    id
  }
}
    \`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R> & Observable<R>
export function getSdk<C>(requester: Requester<C>) {
  return {
    feed(variables?: FeedQueryVariables, options?: C): Promise<FeedQuery> {
      return requester<FeedQuery, FeedQueryVariables>(FeedDocument, variables, options);
    },
    commentAdded(variables?: CommentAddedSubscriptionVariables, options?: C): Observable<CommentAddedSubscription> {
      return requester<CommentAddedSubscription, CommentAddedSubscriptionVariables>(CommentAddedDocument, variables, options);
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;"
`;

exports[`generic-sdk sdk Should generate a correct wrap method with documentMode=string 1`] = `
"export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  /** A feed of repository submissions */
  feed?: Maybe<Array<Maybe<Entry>>>;
  /** A single entry */
  entry?: Maybe<Entry>;
  /** Return the currently logged in user, or null if nobody is logged in */
  currentUser?: Maybe<User>;
};


export type QueryFeedArgs = {
  type: FeedType;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
};


export type QueryEntryArgs = {
  repoFullName: Scalars['String'];
};

/** A list of options for the sort order of the feed */
export enum FeedType {
  /** Sort by a combination of freshness and score, using Reddit's algorithm */
  Hot = 'HOT',
  /** Newest entries first */
  New = 'NEW',
  /** Highest score entries first */
  Top = 'TOP'
}

/** Information about a GitHub repository submitted to GitHunt */
export type Entry = {
  __typename?: 'Entry';
  /** Information about the repository from GitHub */
  repository: Repository;
  /** The GitHub user who submitted this entry */
  postedBy: User;
  /** A timestamp of when the entry was submitted */
  createdAt: Scalars['Float'];
  /** The score of this repository, upvotes - downvotes */
  score: Scalars['Int'];
  /** The hot score of this repository */
  hotScore: Scalars['Float'];
  /** Comments posted about this repository */
  comments: Array<Maybe<Comment>>;
  /** The number of comments posted about this repository */
  commentCount: Scalars['Int'];
  /** The SQL ID of this entry */
  id: Scalars['Int'];
  /** XXX to be changed */
  vote: Vote;
};


/** Information about a GitHub repository submitted to GitHunt */
export type EntryCommentsArgs = {
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};

/**
 * A repository object from the GitHub API. This uses the exact field names returned by the
 * GitHub API for simplicity, even though the convention for GraphQL is usually to camel case.
 */
export type Repository = {
  __typename?: 'Repository';
  /** Just the name of the repository, e.g. GitHunt-API */
  name: Scalars['String'];
  /** The full name of the repository with the username, e.g. apollostack/GitHunt-API */
  full_name: Scalars['String'];
  /** The description of the repository */
  description?: Maybe<Scalars['String']>;
  /** The link to the repository on GitHub */
  html_url: Scalars['String'];
  /** The number of people who have starred this repository on GitHub */
  stargazers_count: Scalars['Int'];
  /** The number of open issues on this repository on GitHub */
  open_issues_count?: Maybe<Scalars['Int']>;
  /** The owner of this repository on GitHub, e.g. apollostack */
  owner?: Maybe<User>;
};

/** A user object from the GitHub API. This uses the exact field names returned from the GitHub API. */
export type User = {
  __typename?: 'User';
  /** The name of the user, e.g. apollostack */
  login: Scalars['String'];
  /** The URL to a directly embeddable image for this user's avatar */
  avatar_url: Scalars['String'];
  /** The URL of this user's GitHub page */
  html_url: Scalars['String'];
};

/** A comment about an entry, submitted by a user */
export type Comment = {
  __typename?: 'Comment';
  /** The SQL ID of this entry */
  id: Scalars['Int'];
  /** The GitHub user who posted the comment */
  postedBy: User;
  /** A timestamp of when the comment was posted */
  createdAt: Scalars['Float'];
  /** The text of the comment */
  content: Scalars['String'];
  /** The repository which this comment is about */
  repoName: Scalars['String'];
};

/** XXX to be removed */
export type Vote = {
  __typename?: 'Vote';
  vote_value: Scalars['Int'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Submit a new repository, returns the new submission */
  submitRepository?: Maybe<Entry>;
  /** Vote on a repository submission, returns the submission that was voted on */
  vote?: Maybe<Entry>;
  /** Comment on a repository, returns the new comment */
  submitComment?: Maybe<Comment>;
};


export type MutationSubmitRepositoryArgs = {
  repoFullName: Scalars['String'];
};


export type MutationVoteArgs = {
  repoFullName: Scalars['String'];
  type: VoteType;
};


export type MutationSubmitCommentArgs = {
  repoFullName: Scalars['String'];
  commentContent: Scalars['String'];
};

/** The type of vote to record, when submitting a vote */
export enum VoteType {
  Up = 'UP',
  Down = 'DOWN',
  Cancel = 'CANCEL'
}

export type Subscription = {
  __typename?: 'Subscription';
  /** Subscription fires on every comment added */
  commentAdded?: Maybe<Comment>;
};


export type SubscriptionCommentAddedArgs = {
  repoFullName: Scalars['String'];
};
export type FeedQueryVariables = Exact<{ [key: string]: never; }>;


export type FeedQuery = (
  { __typename?: 'Query' }
  & { feed?: Maybe<Array<Maybe<(
    { __typename?: 'Entry' }
    & Pick<Entry, 'id' | 'commentCount'>
    & { repository: (
      { __typename?: 'Repository' }
      & { owner?: Maybe<(
        { __typename?: 'User' }
        & Pick<User, 'avatar_url'>
      )> }
    ) }
  )>>> }
);

export type Feed2QueryVariables = Exact<{
  v: Scalars['String'];
}>;


export type Feed2Query = (
  { __typename?: 'Query' }
  & { feed?: Maybe<Array<Maybe<(
    { __typename?: 'Entry' }
    & Pick<Entry, 'id'>
  )>>> }
);

export type Feed3QueryVariables = Exact<{
  v?: Maybe<Scalars['String']>;
}>;


export type Feed3Query = (
  { __typename?: 'Query' }
  & { feed?: Maybe<Array<Maybe<(
    { __typename?: 'Entry' }
    & Pick<Entry, 'id'>
  )>>> }
);

export type Feed4QueryVariables = Exact<{
  v?: Scalars['String'];
}>;


export type Feed4Query = (
  { __typename?: 'Query' }
  & { feed?: Maybe<Array<Maybe<(
    { __typename?: 'Entry' }
    & Pick<Entry, 'id'>
  )>>> }
);

export const FeedDocument = \`
    query feed {
  feed {
    id
    commentCount
    repository {
      owner {
        avatar_url
      }
    }
  }
}
    \`;
export const Feed2Document = \`
    query feed2($v: String!) {
  feed {
    id
  }
}
    \`;
export const Feed3Document = \`
    query feed3($v: String) {
  feed {
    id
  }
}
    \`;
export const Feed4Document = \`
    query feed4($v: String! = \\"TEST\\") {
  feed {
    id
  }
}
    \`;
export type Requester<C= {}> = <R, V>(doc: string, vars?: V, options?: C) => Promise<R>
export function getSdk<C>(requester: Requester<C>) {
  return {
    feed(variables?: FeedQueryVariables, options?: C): Promise<FeedQuery> {
      return requester<FeedQuery, FeedQueryVariables>(FeedDocument, variables, options);
    },
    feed2(variables: Feed2QueryVariables, options?: C): Promise<Feed2Query> {
      return requester<Feed2Query, Feed2QueryVariables>(Feed2Document, variables, options);
    },
    feed3(variables?: Feed3QueryVariables, options?: C): Promise<Feed3Query> {
      return requester<Feed3Query, Feed3QueryVariables>(Feed3Document, variables, options);
    },
    feed4(variables?: Feed4QueryVariables, options?: C): Promise<Feed4Query> {
      return requester<Feed4Query, Feed4QueryVariables>(Feed4Document, variables, options);
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;
async function test() {
  const requester = <R, V> (doc: string, vars: V): Promise<R> => Promise.resolve({} as unknown as R);
  const sdk = getSdk(requester);

  await sdk.feed();
  await sdk.feed3();
  await sdk.feed4();

  const result = await sdk.feed2({ v: \\"1\\" });

  if (result.feed) {
    if (result.feed[0]) {
      const id = result.feed[0].id
    }
  }
}"
`;
