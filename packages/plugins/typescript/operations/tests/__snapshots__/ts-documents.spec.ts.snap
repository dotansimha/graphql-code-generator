// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TypeScript Operations Plugin Config should include fragment variable definitions when experimentalFragmentVariables is set 1`] = `
"export type TextNotificationFragmentFragment = { __typename?: 'TextNotification', text?: string };


export type TextNotificationFragmentFragmentVariables = Exact<{
  skip: Scalars['Boolean'];
}>;
"
`;

exports[`TypeScript Operations Plugin Issues #2699 - Issues with multiple interfaces and unions 1`] = `
"export type GetEntityBrandDataQueryVariables = Exact<{
  gid: Scalars['ID'];
  brand: Scalars['ID'];
}>;


export type GetEntityBrandDataQuery = { __typename?: 'Query', node: { __typename: 'Company', active: boolean, id: string, createdAt: any, updatedAt: any, brandData?: { __typename?: 'EntityBrandData', active: boolean, browsable: boolean, title: string, alternateTitle?: string | null, description: string } | null, createdBy?: { __typename?: 'User', id: string, name: string } | null, updatedBy?: { __typename?: 'User', id: string, name: string } | null } | { __typename: 'Theater', active: boolean, id: string, createdAt: any, updatedAt: any, brandData?: { __typename?: 'EntityBrandData', active: boolean, browsable: boolean, title: string, alternateTitle?: string | null, description: string } | null, createdBy?: { __typename?: 'User', id: string, name: string } | null, updatedBy?: { __typename?: 'User', id: string, name: string } | null } | { __typename: 'Movie', id: string, createdAt: any, updatedAt: any, brandData?: { __typename?: 'EntityBrandData', active: boolean, browsable: boolean, title: string, alternateTitle?: string | null, description: string } | null, createdBy?: { __typename?: 'User', id: string, name: string } | null, updatedBy?: { __typename?: 'User', id: string, name: string } | null } | { __typename: 'User', id: string, createdAt: any, updatedAt: any, brandData?: { __typename?: 'EntityBrandData', active: boolean, browsable: boolean, title: string, alternateTitle?: string | null, description: string } | null, createdBy?: { __typename?: 'User', id: string, name: string } | null, updatedBy?: { __typename?: 'User', id: string, name: string } | null } };

type EntityBrandData_Company_Fragment = { __typename?: 'Company', brandData?: { __typename?: 'EntityBrandData', active: boolean, browsable: boolean, title: string, alternateTitle?: string | null, description: string } | null };

type EntityBrandData_Theater_Fragment = { __typename?: 'Theater', brandData?: { __typename?: 'EntityBrandData', active: boolean, browsable: boolean, title: string, alternateTitle?: string | null, description: string } | null };

type EntityBrandData_Movie_Fragment = { __typename?: 'Movie', brandData?: { __typename?: 'EntityBrandData', active: boolean, browsable: boolean, title: string, alternateTitle?: string | null, description: string } | null };

type EntityBrandData_User_Fragment = { __typename?: 'User', brandData?: { __typename?: 'EntityBrandData', active: boolean, browsable: boolean, title: string, alternateTitle?: string | null, description: string } | null };

export type EntityBrandDataFragment = EntityBrandData_Company_Fragment | EntityBrandData_Theater_Fragment | EntityBrandData_Movie_Fragment | EntityBrandData_User_Fragment;

type ElementMetadata_Company_Fragment = { __typename?: 'Company', createdAt: any, updatedAt: any, createdBy?: { __typename?: 'User', id: string, name: string } | null, updatedBy?: { __typename?: 'User', id: string, name: string } | null };

type ElementMetadata_Theater_Fragment = { __typename?: 'Theater', createdAt: any, updatedAt: any, createdBy?: { __typename?: 'User', id: string, name: string } | null, updatedBy?: { __typename?: 'User', id: string, name: string } | null };

type ElementMetadata_Movie_Fragment = { __typename?: 'Movie', createdAt: any, updatedAt: any, createdBy?: { __typename?: 'User', id: string, name: string } | null, updatedBy?: { __typename?: 'User', id: string, name: string } | null };

type ElementMetadata_User_Fragment = { __typename?: 'User', createdAt: any, updatedAt: any, createdBy?: { __typename?: 'User', id: string, name: string } | null, updatedBy?: { __typename?: 'User', id: string, name: string } | null };

export type ElementMetadataFragment = ElementMetadata_Company_Fragment | ElementMetadata_Theater_Fragment | ElementMetadata_Movie_Fragment | ElementMetadata_User_Fragment;
"
`;

exports[`TypeScript Operations Plugin Issues #2916 - Missing import prefix with preResolveTypes: true and near-operation-file preset 1`] = `
"export type UserQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type UserQuery = { user: { id: string, username: string, email: string, dep: Types.Department } };
"
`;

exports[`TypeScript Operations Plugin Issues #3064 - fragments over interfaces causes issues with fields 1`] = `
"type Venue_Hotel_Fragment = { __typename?: 'Hotel', id: string, gpsPosition: { __typename?: 'GPSPosition', lat: number, lng: number } };

type Venue_Transport_Fragment = { __typename?: 'Transport', id: string };

export type VenueFragment = Venue_Hotel_Fragment | Venue_Transport_Fragment;

export type QQueryVariables = Exact<{ [key: string]: never; }>;


export type QQuery = { __typename?: 'Query', hotel: { __typename?: 'Hotel', id: string, gpsPosition: { __typename?: 'GPSPosition', lat: number, lng: number } }, transport: { __typename?: 'Transport', id: string } };
"
`;

exports[`TypeScript Operations Plugin Issues #3064 - fragments over interfaces causes issues with fields 2`] = `
"export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Venue = {
  id: Scalars['String'];
  name: Scalars['String'];
};

export type GpsPosition = {
  __typename?: 'GPSPosition';
  lat: Scalars['Float'];
  lng: Scalars['Float'];
};

export type VenueWithPosition = {
  id: Scalars['String'];
  gpsPosition: GpsPosition;
};

export type Hotel = VenueWithPosition & Venue & {
  __typename?: 'Hotel';
  id: Scalars['String'];
  gpsPosition: GpsPosition;
  name: Scalars['String'];
};

export type Transport = Venue & {
  __typename?: 'Transport';
  id: Scalars['String'];
  name: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  hotel: Hotel;
  transport: Transport;
};
type Venue_Hotel_Fragment = { __typename?: 'Hotel', id: string, gpsPosition: { __typename?: 'GPSPosition', lat: number, lng: number } };

type Venue_Transport_Fragment = { __typename?: 'Transport', id: string };

export type VenueFragment = Venue_Hotel_Fragment | Venue_Transport_Fragment;

export type QQueryVariables = Exact<{ [key: string]: never; }>;


export type QQuery = { __typename?: 'Query', hotel: { __typename?: 'Hotel', id: string, gpsPosition: { __typename?: 'GPSPosition', lat: number, lng: number } }, transport: { __typename?: 'Transport', id: string } };
function test(q: QQuery) {
        if (q.hotel) {
            const t1 = q.hotel.gpsPosition.lat
        }

        if (q.transport) {
            const t2 = q.transport.id;
        }
    }"
`;

exports[`TypeScript Operations Plugin Selection Set Should generate the correct __typename when using both inline fragment and spread over type 1`] = `
"export type UserQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type UserQueryQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'name'>
  )> }
);

export type UserFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'name'>
);
"
`;

exports[`TypeScript Operations Plugin Selection Set Should generate the correct __typename when using fragment over type 1`] = `
"export type UserQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type UserQueryQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'name'>
  )> }
);
"
`;

exports[`TypeScript Operations Plugin Selection Set Should generate the correct __typename when using fragment spread over type 1`] = `
"export type UserQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type UserQueryQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'name'>
  )> }
);

export type UserFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'name'>
);
"
`;

exports[`TypeScript Operations Plugin Selection Set Should generate the correct __typename when using fragment spread over union 1`] = `
"export type UserFragmentFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id'>
);

export type AaaQueryVariables = Exact<{ [key: string]: never; }>;


export type AaaQuery = (
  { __typename?: 'Query' }
  & { user: (
    { __typename?: 'User' }
    & Pick<User, 'id'>
  ) | { __typename?: 'Error' } }
);
"
`;

exports[`TypeScript Operations Plugin Selection Set Should generate the correct intersection for fragments when using with interfaces with same type 1`] = `
"export type Unnamed_1_QueryVariables = Exact<{ [key: string]: never; }>;


export type Unnamed_1_Query = (
  { __typename?: 'Query' }
  & { b?: Maybe<(
    { __typename?: 'A' }
    & Pick<A, 'id' | 'x'>
  ) | { __typename?: 'B' }> }
);

export type AFragment = (
  { __typename?: 'A' }
  & Pick<A, 'id'>
);

export type BFragment = (
  { __typename?: 'A' }
  & Pick<A, 'x'>
);
"
`;

exports[`TypeScript Operations Plugin Selection Set Should have valid __typename usage and split types according to that (with usage) 1`] = `
"type NetRoute_Ipv4Route_Fragment = (
  { __typename: 'IPV4Route' }
  & { ipv4Address: Ipv4Route['address'], ipv4Gateway: Ipv4Route['gateway'] }
);

type NetRoute_Ipv6Route_Fragment = (
  { __typename: 'IPV6Route' }
  & { ipv6Address: Ipv6Route['address'], ipv6Gateway: Ipv6Route['gateway'] }
);

export type NetRouteFragment = NetRoute_Ipv4Route_Fragment | NetRoute_Ipv6Route_Fragment;

export type QqQueryVariables = Exact<{ [key: string]: never; }>;


export type QqQuery = (
  { __typename?: 'Query' }
  & { routes: Array<(
    { __typename: 'IPV4Route' }
    & { ipv4Address: Ipv4Route['address'], ipv4Gateway: Ipv4Route['gateway'] }
  ) | (
    { __typename: 'IPV6Route' }
    & { ipv6Address: Ipv6Route['address'], ipv6Gateway: Ipv6Route['gateway'] }
  )> }
);
"
`;

exports[`TypeScript Operations Plugin Selection Set Should have valid __typename usage and split types according to that (with usage) 2`] = `
"type NetRoute_Ipv4Route_Fragment = (
  { __typename: 'IPV4Route' }
  & { ipv4Address: Ipv4Route['address'], ipv4Gateway: Ipv4Route['gateway'] }
);

type NetRoute_Ipv6Route_Fragment = (
  { __typename: 'IPV6Route' }
  & { ipv6Address: Ipv6Route['address'], ipv6Gateway: Ipv6Route['gateway'] }
);

export type NetRouteFragment = NetRoute_Ipv4Route_Fragment | NetRoute_Ipv6Route_Fragment;

export type TestFragment = (
  { __typename?: 'IPV6Route' }
  & { ipv6Address: Ipv6Route['address'], ipv6Gateway: Ipv6Route['gateway'] }
);

export type QqQueryVariables = Exact<{ [key: string]: never; }>;


export type QqQuery = (
  { __typename?: 'Query' }
  & { routes: Array<(
    { __typename: 'IPV4Route' }
    & { ipv4Address: Ipv4Route['address'], ipv4Gateway: Ipv4Route['gateway'] }
  ) | (
    { __typename: 'IPV6Route' }
    & { ipv6Address: Ipv6Route['address'], ipv6Gateway: Ipv6Route['gateway'] }
  )> }
);
"
`;

exports[`TypeScript Operations Plugin Selection Set Should have valid fragments intersection on different types (with usage) #2498 1`] = `
"export type TomFragment = (
  { __typename?: 'Tom' }
  & Pick<Tom, 'id' | 'foo'>
);

export type JerryFragment = (
  { __typename?: 'Jerry' }
  & Pick<Jerry, 'id' | 'bar'>
);

type User_Tom_Fragment = (
  { __typename?: 'Tom' }
  & Pick<Tom, 'id' | 'foo'>
);

type User_Jerry_Fragment = (
  { __typename?: 'Jerry' }
  & Pick<Jerry, 'id' | 'bar'>
);

export type UserFragment = User_Tom_Fragment | User_Jerry_Fragment;

export type UserQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type UserQueryQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'Tom' }
    & Pick<Tom, 'id' | 'foo'>
  ) | (
    { __typename?: 'Jerry' }
    & Pick<Jerry, 'id' | 'bar'>
  )> }
);
"
`;

exports[`TypeScript Operations Plugin Union & Interfaces #4216 - handle fragments against unions and interfaces with flattenGeneratedTypes 1`] = `
"export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  search?: Maybe<Array<Searchable>>;
};

export type Concept = {
  id?: Maybe<Scalars['String']>;
};

export type Dimension = Concept & {
  __typename?: 'Dimension';
  id?: Maybe<Scalars['String']>;
};

export type DimValue = {
  __typename?: 'DimValue';
  dimension?: Maybe<Dimension>;
  value: Scalars['String'];
};

export type Searchable = Dimension | DimValue;
export type SearchPopularQueryVariables = Exact<{ [key: string]: never; }>;


export type SearchPopularQuery = (
  { __typename?: 'Query' }
  & { search?: Maybe<Array<(
    { __typename?: 'Dimension' }
    & Pick<Dimension, 'id'>
  ) | (
    { __typename?: 'DimValue' }
    & Pick<DimValue, 'value'>
    & { dimension?: Maybe<(
      { __typename?: 'Dimension' }
      & Pick<Dimension, 'id'>
    )> }
  )>> }
);
"
`;

exports[`TypeScript Operations Plugin Union & Interfaces Should handle union selection sets with both FragmentSpreads and InlineFragments 1`] = `
"export type UserQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type UserQueryQuery = (
  { __typename?: 'Query' }
  & { user: (
    { __typename?: 'User' }
    & Pick<User, 'login' | 'id'>
  ) | (
    { __typename?: 'Error2' }
    & Pick<Error2, 'message'>
  ) | (
    { __typename?: 'Error3' }
    & Pick<Error3, 'message'>
    & { info?: Maybe<(
      { __typename?: 'AdditionalInfo' }
      & Pick<AdditionalInfo, 'message2' | 'message'>
    )> }
  ) }
);

export type AdditionalInfoFragment = (
  { __typename?: 'AdditionalInfo' }
  & Pick<AdditionalInfo, 'message'>
);

type UserResult1_User_Fragment = (
  { __typename?: 'User' }
  & Pick<User, 'id'>
);

type UserResult1_Error2_Fragment = { __typename?: 'Error2' };

type UserResult1_Error3_Fragment = (
  { __typename?: 'Error3' }
  & { info?: Maybe<(
    { __typename?: 'AdditionalInfo' }
    & Pick<AdditionalInfo, 'message2'>
  )> }
);

export type UserResult1Fragment = UserResult1_User_Fragment | UserResult1_Error2_Fragment | UserResult1_Error3_Fragment;

type UserResult_User_Fragment = (
  { __typename?: 'User' }
  & Pick<User, 'id'>
);

type UserResult_Error2_Fragment = (
  { __typename?: 'Error2' }
  & Pick<Error2, 'message'>
);

type UserResult_Error3_Fragment = { __typename?: 'Error3' };

export type UserResultFragment = UserResult_User_Fragment | UserResult_Error2_Fragment | UserResult_Error3_Fragment;
"
`;

exports[`TypeScript Operations Plugin Union & Interfaces Should handle union selection sets with both FragmentSpreads and InlineFragments with flattenGeneratedTypes 1`] = `
"export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Error = {
  message: Scalars['String'];
};

export type Error1 = Error & {
  __typename?: 'Error1';
  message: Scalars['String'];
};

export type Error2 = Error & {
  __typename?: 'Error2';
  message: Scalars['String'];
};

export type Error3 = Error & {
  __typename?: 'Error3';
  message: Scalars['String'];
  info?: Maybe<AdditionalInfo>;
};

export type AdditionalInfo = {
  __typename?: 'AdditionalInfo';
  message: Scalars['String'];
  message2: Scalars['String'];
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  login: Scalars['String'];
};

export type UserResult = User | Error2 | Error3;

export type Query = {
  __typename?: 'Query';
  user: UserResult;
};
export type UserQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type UserQueryQuery = (
  { __typename?: 'Query' }
  & { user: (
    { __typename?: 'User' }
    & Pick<User, 'id' | 'login'>
  ) | (
    { __typename?: 'Error2' }
    & Pick<Error2, 'message'>
  ) | (
    { __typename?: 'Error3' }
    & Pick<Error3, 'message'>
    & { info?: Maybe<(
      { __typename?: 'AdditionalInfo' }
      & Pick<AdditionalInfo, 'message2' | 'message'>
    )> }
  ) }
);

        function t(q: UserQueryQuery) {
            if (q.user) {
                if (q.user.__typename === 'User') {
                    if (q.user.id) {
                        const u = q.user.login;
                    }
                }
                if (q.user.__typename === 'Error2') {
                    console.log(q.user.message);
                }
                if (q.user.__typename === 'Error3') {
                    if (q.user.info) {
                        console.log(q.user.info.__typename)
                    }
                }
            }
        }"
`;

exports[`TypeScript Operations Plugin Union & Interfaces Should handle union selection sets with both FragmentSpreads and InlineFragments with flattenGeneratedTypes and directives 1`] = `
"export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Error = {
  message: Scalars['String'];
};

export type Error1 = Error & {
  __typename?: 'Error1';
  message: Scalars['String'];
};

export type Error2 = Error & {
  __typename?: 'Error2';
  message: Scalars['String'];
};

export type Error3 = Error & {
  __typename?: 'Error3';
  message: Scalars['String'];
  info?: Maybe<AdditionalInfo>;
};

export type AdditionalInfo = {
  __typename?: 'AdditionalInfo';
  message: Scalars['String'];
  message2: Scalars['String'];
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  login: Scalars['String'];
  test?: Maybe<Scalars['String']>;
  test2?: Maybe<Scalars['String']>;
};

export type UserResult = User | Error2 | Error3;

export type Query = {
  __typename?: 'Query';
  user: UserResult;
};
export type UserQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type UserQueryQuery = (
  { __typename?: 'Query' }
  & { user: (
    { __typename?: 'User' }
    & Pick<User, 'id' | 'test2' | 'login' | 'test'>
  ) | (
    { __typename?: 'Error2' }
    & Pick<Error2, 'message'>
  ) | (
    { __typename?: 'Error3' }
    & Pick<Error3, 'message'>
    & { info?: Maybe<(
      { __typename?: 'AdditionalInfo' }
      & Pick<AdditionalInfo, 'message2' | 'message'>
    )> }
  ) }
);

        function t(q: UserQueryQuery) {
            if (q.user) {
                if (q.user.__typename === 'User') {
                    if (q.user.id) {
                        const u = q.user.login;
                    }
                }
                if (q.user.__typename === 'Error2') {
                    console.log(q.user.message);
                }
                if (q.user.__typename === 'Error3') {
                    if (q.user.info) {
                        console.log(q.user.info.__typename)
                    }
                }
            }
        }"
`;
