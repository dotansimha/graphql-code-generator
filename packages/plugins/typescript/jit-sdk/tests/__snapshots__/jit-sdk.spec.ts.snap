// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`jit-sdk sdk Should generate a correct wrap method 1`] = `
"export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
import { GraphQLSchema, ExecutionResult } from 'graphql';
import { compileQuery, isCompiledQuery } from 'graphql-jit';
import { AggregateError, isAsyncIterable, mapAsyncIterator } from '@graphql-tools/utils';
import gql from 'graphql-tag';
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  /** A feed of repository submissions */
  feed?: Maybe<Array<Maybe<Entry>>>;
  /** A single entry */
  entry?: Maybe<Entry>;
  /** Return the currently logged in user, or null if nobody is logged in */
  currentUser?: Maybe<User>;
};


export type QueryFeedArgs = {
  type: FeedType;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
};


export type QueryEntryArgs = {
  repoFullName: Scalars['String'];
};

/** A list of options for the sort order of the feed */
export enum FeedType {
  /** Sort by a combination of freshness and score, using Reddit's algorithm */
  Hot = 'HOT',
  /** Newest entries first */
  New = 'NEW',
  /** Highest score entries first */
  Top = 'TOP'
}

/** Information about a GitHub repository submitted to GitHunt */
export type Entry = {
  __typename?: 'Entry';
  /** Information about the repository from GitHub */
  repository: Repository;
  /** The GitHub user who submitted this entry */
  postedBy: User;
  /** A timestamp of when the entry was submitted */
  createdAt: Scalars['Float'];
  /** The score of this repository, upvotes - downvotes */
  score: Scalars['Int'];
  /** The hot score of this repository */
  hotScore: Scalars['Float'];
  /** Comments posted about this repository */
  comments: Array<Maybe<Comment>>;
  /** The number of comments posted about this repository */
  commentCount: Scalars['Int'];
  /** The SQL ID of this entry */
  id: Scalars['Int'];
  /** XXX to be changed */
  vote: Vote;
};


/** Information about a GitHub repository submitted to GitHunt */
export type EntryCommentsArgs = {
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};

/**
 * A repository object from the GitHub API. This uses the exact field names returned by the
 * GitHub API for simplicity, even though the convention for GraphQL is usually to camel case.
 */
export type Repository = {
  __typename?: 'Repository';
  /** Just the name of the repository, e.g. GitHunt-API */
  name: Scalars['String'];
  /** The full name of the repository with the username, e.g. apollostack/GitHunt-API */
  full_name: Scalars['String'];
  /** The description of the repository */
  description?: Maybe<Scalars['String']>;
  /** The link to the repository on GitHub */
  html_url: Scalars['String'];
  /** The number of people who have starred this repository on GitHub */
  stargazers_count: Scalars['Int'];
  /** The number of open issues on this repository on GitHub */
  open_issues_count?: Maybe<Scalars['Int']>;
  /** The owner of this repository on GitHub, e.g. apollostack */
  owner?: Maybe<User>;
};

/** A user object from the GitHub API. This uses the exact field names returned from the GitHub API. */
export type User = {
  __typename?: 'User';
  /** The name of the user, e.g. apollostack */
  login: Scalars['String'];
  /** The URL to a directly embeddable image for this user's avatar */
  avatar_url: Scalars['String'];
  /** The URL of this user's GitHub page */
  html_url: Scalars['String'];
};

/** A comment about an entry, submitted by a user */
export type Comment = {
  __typename?: 'Comment';
  /** The SQL ID of this entry */
  id: Scalars['Int'];
  /** The GitHub user who posted the comment */
  postedBy: User;
  /** A timestamp of when the comment was posted */
  createdAt: Scalars['Float'];
  /** The text of the comment */
  content: Scalars['String'];
  /** The repository which this comment is about */
  repoName: Scalars['String'];
};

/** XXX to be removed */
export type Vote = {
  __typename?: 'Vote';
  vote_value: Scalars['Int'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Submit a new repository, returns the new submission */
  submitRepository?: Maybe<Entry>;
  /** Vote on a repository submission, returns the submission that was voted on */
  vote?: Maybe<Entry>;
  /** Comment on a repository, returns the new comment */
  submitComment?: Maybe<Comment>;
};


export type MutationSubmitRepositoryArgs = {
  repoFullName: Scalars['String'];
};


export type MutationVoteArgs = {
  repoFullName: Scalars['String'];
  type: VoteType;
};


export type MutationSubmitCommentArgs = {
  repoFullName: Scalars['String'];
  commentContent: Scalars['String'];
};

/** The type of vote to record, when submitting a vote */
export enum VoteType {
  Up = 'UP',
  Down = 'DOWN',
  Cancel = 'CANCEL'
}

export type Subscription = {
  __typename?: 'Subscription';
  /** Subscription fires on every comment added */
  commentAdded?: Maybe<Comment>;
};


export type SubscriptionCommentAddedArgs = {
  repoFullName: Scalars['String'];
};
export type FeedQueryVariables = Exact<{ [key: string]: never; }>;


export type FeedQuery = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number, commentCount: number, repository: { __typename?: 'Repository', owner?: { __typename?: 'User', avatar_url: string } | null | undefined } } | null | undefined> | null | undefined };

export type Feed2QueryVariables = Exact<{
  v: Scalars['String'];
}>;


export type Feed2Query = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number } | null | undefined> | null | undefined };

export type Feed3QueryVariables = Exact<{
  v?: Maybe<Scalars['String']>;
}>;


export type Feed3Query = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number } | null | undefined> | null | undefined };

export type Feed4QueryVariables = Exact<{
  v?: Scalars['String'];
}>;


export type Feed4Query = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number } | null | undefined> | null | undefined };

export const FeedDocument = gql\`
    query feed {
  feed {
    id
    commentCount
    repository {
      owner {
        avatar_url
      }
    }
  }
}
    \`;
export const Feed2Document = gql\`
    query feed2($v: String!) {
  feed {
    id
  }
}
    \`;
export const Feed3Document = gql\`
    query feed3($v: String) {
  feed {
    id
  }
}
    \`;
export const Feed4Document = gql\`
    query feed4($v: String! = \\"TEST\\") {
  feed {
    id
  }
}
    \`;
function handleExecutionResult<T>(result: ExecutionResult, operationName: string) {
  if (result.errors) {
    const originalErrors = result.errors.map(error => error.originalError|| error);
    throw new AggregateError(originalErrors, \`Failed to execute \${operationName}: \\\\n\\\\t\${originalErrors.join('\\\\n\\\\t')}\`);
  }
  return result.data as T;
}
export function getSdk<C = any, R = any>(schema: GraphQLSchema, globalContext?: C, globalRoot?: R) {
    const feedCompiled = compileQuery(schema, FeedDocument, 'feed');
    if(!(isCompiledQuery(feedCompiled))) {
      const originalErrors = feedCompiled?.errors?.map(error => error.originalError || error) || [];
      throw new AggregateError(originalErrors, \`Failed to compile feed: \\\\n\\\\t\${originalErrors.join('\\\\n\\\\t')}\`);
    }

    const feed2Compiled = compileQuery(schema, Feed2Document, 'feed2');
    if(!(isCompiledQuery(feed2Compiled))) {
      const originalErrors = feed2Compiled?.errors?.map(error => error.originalError || error) || [];
      throw new AggregateError(originalErrors, \`Failed to compile feed2: \\\\n\\\\t\${originalErrors.join('\\\\n\\\\t')}\`);
    }

    const feed3Compiled = compileQuery(schema, Feed3Document, 'feed3');
    if(!(isCompiledQuery(feed3Compiled))) {
      const originalErrors = feed3Compiled?.errors?.map(error => error.originalError || error) || [];
      throw new AggregateError(originalErrors, \`Failed to compile feed3: \\\\n\\\\t\${originalErrors.join('\\\\n\\\\t')}\`);
    }

    const feed4Compiled = compileQuery(schema, Feed4Document, 'feed4');
    if(!(isCompiledQuery(feed4Compiled))) {
      const originalErrors = feed4Compiled?.errors?.map(error => error.originalError || error) || [];
      throw new AggregateError(originalErrors, \`Failed to compile feed4: \\\\n\\\\t\${originalErrors.join('\\\\n\\\\t')}\`);
    }

  return {
    async feed(variables?: FeedQueryVariables, context = globalContext, root = globalRoot): Promise<FeedQuery> {
      const result = await feedCompiled.query(root, context, variables);
      return handleExecutionResult(result, 'feed');
    },
    async feed2(variables: Feed2QueryVariables, context = globalContext, root = globalRoot): Promise<Feed2Query> {
      const result = await feed2Compiled.query(root, context, variables);
      return handleExecutionResult(result, 'feed2');
    },
    async feed3(variables?: Feed3QueryVariables, context = globalContext, root = globalRoot): Promise<Feed3Query> {
      const result = await feed3Compiled.query(root, context, variables);
      return handleExecutionResult(result, 'feed3');
    },
    async feed4(variables?: Feed4QueryVariables, context = globalContext, root = globalRoot): Promise<Feed4Query> {
      const result = await feed4Compiled.query(root, context, variables);
      return handleExecutionResult(result, 'feed4');
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;
async function test() {
  const schema = buildSchema(\`\\"\\"\\"\\"\\"\\"
type Query {
  \\"\\"\\"A feed of repository submissions\\"\\"\\"
  feed(
    \\"\\"\\"The sort order for the feed\\"\\"\\"
    type: FeedType!

    \\"\\"\\"The number of items to skip, for pagination\\"\\"\\"
    offset: Int

    \\"\\"\\"The number of items to fetch starting from the offset, for pagination\\"\\"\\"
    limit: Int
  ): [Entry]

  \\"\\"\\"A single entry\\"\\"\\"
  entry(
    \\"\\"\\"
    The full repository name from GitHub, e.g. \\"apollostack/GitHunt-API\\"
    \\"\\"\\"
    repoFullName: String!
  ): Entry

  \\"\\"\\"Return the currently logged in user, or null if nobody is logged in\\"\\"\\"
  currentUser: User
}

\\"\\"\\"A list of options for the sort order of the feed\\"\\"\\"
enum FeedType {
  \\"\\"\\"Sort by a combination of freshness and score, using Reddit's algorithm\\"\\"\\"
  HOT

  \\"\\"\\"Newest entries first\\"\\"\\"
  NEW

  \\"\\"\\"Highest score entries first\\"\\"\\"
  TOP
}

\\"\\"\\"Information about a GitHub repository submitted to GitHunt\\"\\"\\"
type Entry {
  \\"\\"\\"Information about the repository from GitHub\\"\\"\\"
  repository: Repository!

  \\"\\"\\"The GitHub user who submitted this entry\\"\\"\\"
  postedBy: User!

  \\"\\"\\"A timestamp of when the entry was submitted\\"\\"\\"
  createdAt: Float!

  \\"\\"\\"The score of this repository, upvotes - downvotes\\"\\"\\"
  score: Int!

  \\"\\"\\"The hot score of this repository\\"\\"\\"
  hotScore: Float!

  \\"\\"\\"Comments posted about this repository\\"\\"\\"
  comments(limit: Int, offset: Int): [Comment]!

  \\"\\"\\"The number of comments posted about this repository\\"\\"\\"
  commentCount: Int!

  \\"\\"\\"The SQL ID of this entry\\"\\"\\"
  id: Int!

  \\"\\"\\"XXX to be changed\\"\\"\\"
  vote: Vote!
}

\\"\\"\\"
A repository object from the GitHub API. This uses the exact field names returned by the
GitHub API for simplicity, even though the convention for GraphQL is usually to camel case.
\\"\\"\\"
type Repository {
  \\"\\"\\"Just the name of the repository, e.g. GitHunt-API\\"\\"\\"
  name: String!

  \\"\\"\\"
  The full name of the repository with the username, e.g. apollostack/GitHunt-API
  \\"\\"\\"
  full_name: String!

  \\"\\"\\"The description of the repository\\"\\"\\"
  description: String

  \\"\\"\\"The link to the repository on GitHub\\"\\"\\"
  html_url: String!

  \\"\\"\\"The number of people who have starred this repository on GitHub\\"\\"\\"
  stargazers_count: Int!

  \\"\\"\\"The number of open issues on this repository on GitHub\\"\\"\\"
  open_issues_count: Int

  \\"\\"\\"The owner of this repository on GitHub, e.g. apollostack\\"\\"\\"
  owner: User
}

\\"\\"\\"
A user object from the GitHub API. This uses the exact field names returned from the GitHub API.
\\"\\"\\"
type User {
  \\"\\"\\"The name of the user, e.g. apollostack\\"\\"\\"
  login: String!

  \\"\\"\\"The URL to a directly embeddable image for this user's avatar\\"\\"\\"
  avatar_url: String!

  \\"\\"\\"The URL of this user's GitHub page\\"\\"\\"
  html_url: String!
}

\\"\\"\\"A comment about an entry, submitted by a user\\"\\"\\"
type Comment {
  \\"\\"\\"The SQL ID of this entry\\"\\"\\"
  id: Int!

  \\"\\"\\"The GitHub user who posted the comment\\"\\"\\"
  postedBy: User!

  \\"\\"\\"A timestamp of when the comment was posted\\"\\"\\"
  createdAt: Float!

  \\"\\"\\"The text of the comment\\"\\"\\"
  content: String!

  \\"\\"\\"The repository which this comment is about\\"\\"\\"
  repoName: String!
}

\\"\\"\\"XXX to be removed\\"\\"\\"
type Vote {
  \\"\\"\\"\\"\\"\\"
  vote_value: Int!
}

\\"\\"\\"\\"\\"\\"
type Mutation {
  \\"\\"\\"Submit a new repository, returns the new submission\\"\\"\\"
  submitRepository(
    \\"\\"\\"
    The full repository name from GitHub, e.g. \\"apollostack/GitHunt-API\\"
    \\"\\"\\"
    repoFullName: String!
  ): Entry

  \\"\\"\\"
  Vote on a repository submission, returns the submission that was voted on
  \\"\\"\\"
  vote(
    \\"\\"\\"
    The full repository name from GitHub, e.g. \\"apollostack/GitHunt-API\\"
    \\"\\"\\"
    repoFullName: String!

    \\"\\"\\"The type of vote - UP, DOWN, or CANCEL\\"\\"\\"
    type: VoteType!
  ): Entry

  \\"\\"\\"Comment on a repository, returns the new comment\\"\\"\\"
  submitComment(
    \\"\\"\\"
    The full repository name from GitHub, e.g. \\"apollostack/GitHunt-API\\"
    \\"\\"\\"
    repoFullName: String!

    \\"\\"\\"The text content for the new comment\\"\\"\\"
    commentContent: String!
  ): Comment
}

\\"\\"\\"The type of vote to record, when submitting a vote\\"\\"\\"
enum VoteType {
  \\"\\"\\"\\"\\"\\"
  UP

  \\"\\"\\"\\"\\"\\"
  DOWN

  \\"\\"\\"\\"\\"\\"
  CANCEL
}

\\"\\"\\"\\"\\"\\"
type Subscription {
  \\"\\"\\"Subscription fires on every comment added\\"\\"\\"
  commentAdded(repoFullName: String!): Comment
}\`);
  const sdk = getJitSdk(schema);

  await sdk.feed();
  await sdk.feed3();
  await sdk.feed4();

  const result = await sdk.feed2({ v: \\"1\\" });

  if (result.feed) {
    if (result.feed[0]) {
      const id = result.feed[0].id
    }
  }
}"
`;

exports[`jit-sdk sdk Should generate a correct wrap method in case of Subscription 1`] = `
"export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
import { GraphQLSchema, ExecutionResult } from 'graphql';
import { compileQuery, isCompiledQuery } from 'graphql-jit';
import { AggregateError, isAsyncIterable, mapAsyncIterator } from '@graphql-tools/utils';
import gql from 'graphql-tag';
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  /** A feed of repository submissions */
  feed?: Maybe<Array<Maybe<Entry>>>;
  /** A single entry */
  entry?: Maybe<Entry>;
  /** Return the currently logged in user, or null if nobody is logged in */
  currentUser?: Maybe<User>;
};


export type QueryFeedArgs = {
  type: FeedType;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
};


export type QueryEntryArgs = {
  repoFullName: Scalars['String'];
};

/** A list of options for the sort order of the feed */
export enum FeedType {
  /** Sort by a combination of freshness and score, using Reddit's algorithm */
  Hot = 'HOT',
  /** Newest entries first */
  New = 'NEW',
  /** Highest score entries first */
  Top = 'TOP'
}

/** Information about a GitHub repository submitted to GitHunt */
export type Entry = {
  __typename?: 'Entry';
  /** Information about the repository from GitHub */
  repository: Repository;
  /** The GitHub user who submitted this entry */
  postedBy: User;
  /** A timestamp of when the entry was submitted */
  createdAt: Scalars['Float'];
  /** The score of this repository, upvotes - downvotes */
  score: Scalars['Int'];
  /** The hot score of this repository */
  hotScore: Scalars['Float'];
  /** Comments posted about this repository */
  comments: Array<Maybe<Comment>>;
  /** The number of comments posted about this repository */
  commentCount: Scalars['Int'];
  /** The SQL ID of this entry */
  id: Scalars['Int'];
  /** XXX to be changed */
  vote: Vote;
};


/** Information about a GitHub repository submitted to GitHunt */
export type EntryCommentsArgs = {
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};

/**
 * A repository object from the GitHub API. This uses the exact field names returned by the
 * GitHub API for simplicity, even though the convention for GraphQL is usually to camel case.
 */
export type Repository = {
  __typename?: 'Repository';
  /** Just the name of the repository, e.g. GitHunt-API */
  name: Scalars['String'];
  /** The full name of the repository with the username, e.g. apollostack/GitHunt-API */
  full_name: Scalars['String'];
  /** The description of the repository */
  description?: Maybe<Scalars['String']>;
  /** The link to the repository on GitHub */
  html_url: Scalars['String'];
  /** The number of people who have starred this repository on GitHub */
  stargazers_count: Scalars['Int'];
  /** The number of open issues on this repository on GitHub */
  open_issues_count?: Maybe<Scalars['Int']>;
  /** The owner of this repository on GitHub, e.g. apollostack */
  owner?: Maybe<User>;
};

/** A user object from the GitHub API. This uses the exact field names returned from the GitHub API. */
export type User = {
  __typename?: 'User';
  /** The name of the user, e.g. apollostack */
  login: Scalars['String'];
  /** The URL to a directly embeddable image for this user's avatar */
  avatar_url: Scalars['String'];
  /** The URL of this user's GitHub page */
  html_url: Scalars['String'];
};

/** A comment about an entry, submitted by a user */
export type Comment = {
  __typename?: 'Comment';
  /** The SQL ID of this entry */
  id: Scalars['Int'];
  /** The GitHub user who posted the comment */
  postedBy: User;
  /** A timestamp of when the comment was posted */
  createdAt: Scalars['Float'];
  /** The text of the comment */
  content: Scalars['String'];
  /** The repository which this comment is about */
  repoName: Scalars['String'];
};

/** XXX to be removed */
export type Vote = {
  __typename?: 'Vote';
  vote_value: Scalars['Int'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Submit a new repository, returns the new submission */
  submitRepository?: Maybe<Entry>;
  /** Vote on a repository submission, returns the submission that was voted on */
  vote?: Maybe<Entry>;
  /** Comment on a repository, returns the new comment */
  submitComment?: Maybe<Comment>;
};


export type MutationSubmitRepositoryArgs = {
  repoFullName: Scalars['String'];
};


export type MutationVoteArgs = {
  repoFullName: Scalars['String'];
  type: VoteType;
};


export type MutationSubmitCommentArgs = {
  repoFullName: Scalars['String'];
  commentContent: Scalars['String'];
};

/** The type of vote to record, when submitting a vote */
export enum VoteType {
  Up = 'UP',
  Down = 'DOWN',
  Cancel = 'CANCEL'
}

export type Subscription = {
  __typename?: 'Subscription';
  /** Subscription fires on every comment added */
  commentAdded?: Maybe<Comment>;
};


export type SubscriptionCommentAddedArgs = {
  repoFullName: Scalars['String'];
};
export type FeedQueryVariables = Exact<{ [key: string]: never; }>;


export type FeedQuery = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number } | null | undefined> | null | undefined };

export type CommentAddedSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type CommentAddedSubscription = { __typename?: 'Subscription', commentAdded?: { __typename?: 'Comment', id: number } | null | undefined };

export const FeedDocument = gql\`
    query feed {
  feed {
    id
  }
}
    \`;
export const CommentAddedDocument = gql\`
    subscription commentAdded {
  commentAdded {
    id
  }
}
    \`;
async function handleSubscriptionResult<T>(resultIterator: AsyncIterableIterator<ExecutionResult> | ExecutionResult, operationName: string) {
  if (isAsyncIterable(resultIterator)) {
    return mapAsyncIterator<any, T>(resultIterator, result => handleExecutionResult(result, operationName));
  } else {
    return handleExecutionResult<T>(resultIterator, operationName);
  }
}
function handleExecutionResult<T>(result: ExecutionResult, operationName: string) {
  if (result.errors) {
    const originalErrors = result.errors.map(error => error.originalError|| error);
    throw new AggregateError(originalErrors, \`Failed to execute \${operationName}: \\\\n\\\\t\${originalErrors.join('\\\\n\\\\t')}\`);
  }
  return result.data as T;
}
export function getSdk<C = any, R = any>(schema: GraphQLSchema, globalContext?: C, globalRoot?: R) {
    const feedCompiled = compileQuery(schema, FeedDocument, 'feed');
    if(!(isCompiledQuery(feedCompiled))) {
      const originalErrors = feedCompiled?.errors?.map(error => error.originalError || error) || [];
      throw new AggregateError(originalErrors, \`Failed to compile feed: \\\\n\\\\t\${originalErrors.join('\\\\n\\\\t')}\`);
    }

    const commentAddedCompiled = compileQuery(schema, CommentAddedDocument, 'commentAdded');
    if(!(isCompiledQuery(commentAddedCompiled))) {
      const originalErrors = commentAddedCompiled?.errors?.map(error => error.originalError || error) || [];
      throw new AggregateError(originalErrors, \`Failed to compile commentAdded: \\\\n\\\\t\${originalErrors.join('\\\\n\\\\t')}\`);
    }

  return {
    async feed(variables?: FeedQueryVariables, context = globalContext, root = globalRoot): Promise<FeedQuery> {
      const result = await feedCompiled.query(root, context, variables);
      return handleExecutionResult(result, 'feed');
    },
    async commentAdded(variables?: CommentAddedSubscriptionVariables, context = globalContext, root = globalRoot): Promise<AsyncIterableIterator<CommentAddedSubscription> | CommentAddedSubscription> {
      const result = await commentAddedCompiled.subscribe!(root, context, variables);
      return handleSubscriptionResult(result, 'commentAdded');
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;"
`;

exports[`jit-sdk sdk Should generate a correct wrap method with documentMode=string 1`] = `
"export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
import { GraphQLSchema, ExecutionResult } from 'graphql';
import { parse } from 'graphql';
import { compileQuery, isCompiledQuery } from 'graphql-jit';
import { AggregateError, isAsyncIterable, mapAsyncIterator } from '@graphql-tools/utils';
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  /** A feed of repository submissions */
  feed?: Maybe<Array<Maybe<Entry>>>;
  /** A single entry */
  entry?: Maybe<Entry>;
  /** Return the currently logged in user, or null if nobody is logged in */
  currentUser?: Maybe<User>;
};


export type QueryFeedArgs = {
  type: FeedType;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
};


export type QueryEntryArgs = {
  repoFullName: Scalars['String'];
};

/** A list of options for the sort order of the feed */
export enum FeedType {
  /** Sort by a combination of freshness and score, using Reddit's algorithm */
  Hot = 'HOT',
  /** Newest entries first */
  New = 'NEW',
  /** Highest score entries first */
  Top = 'TOP'
}

/** Information about a GitHub repository submitted to GitHunt */
export type Entry = {
  __typename?: 'Entry';
  /** Information about the repository from GitHub */
  repository: Repository;
  /** The GitHub user who submitted this entry */
  postedBy: User;
  /** A timestamp of when the entry was submitted */
  createdAt: Scalars['Float'];
  /** The score of this repository, upvotes - downvotes */
  score: Scalars['Int'];
  /** The hot score of this repository */
  hotScore: Scalars['Float'];
  /** Comments posted about this repository */
  comments: Array<Maybe<Comment>>;
  /** The number of comments posted about this repository */
  commentCount: Scalars['Int'];
  /** The SQL ID of this entry */
  id: Scalars['Int'];
  /** XXX to be changed */
  vote: Vote;
};


/** Information about a GitHub repository submitted to GitHunt */
export type EntryCommentsArgs = {
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};

/**
 * A repository object from the GitHub API. This uses the exact field names returned by the
 * GitHub API for simplicity, even though the convention for GraphQL is usually to camel case.
 */
export type Repository = {
  __typename?: 'Repository';
  /** Just the name of the repository, e.g. GitHunt-API */
  name: Scalars['String'];
  /** The full name of the repository with the username, e.g. apollostack/GitHunt-API */
  full_name: Scalars['String'];
  /** The description of the repository */
  description?: Maybe<Scalars['String']>;
  /** The link to the repository on GitHub */
  html_url: Scalars['String'];
  /** The number of people who have starred this repository on GitHub */
  stargazers_count: Scalars['Int'];
  /** The number of open issues on this repository on GitHub */
  open_issues_count?: Maybe<Scalars['Int']>;
  /** The owner of this repository on GitHub, e.g. apollostack */
  owner?: Maybe<User>;
};

/** A user object from the GitHub API. This uses the exact field names returned from the GitHub API. */
export type User = {
  __typename?: 'User';
  /** The name of the user, e.g. apollostack */
  login: Scalars['String'];
  /** The URL to a directly embeddable image for this user's avatar */
  avatar_url: Scalars['String'];
  /** The URL of this user's GitHub page */
  html_url: Scalars['String'];
};

/** A comment about an entry, submitted by a user */
export type Comment = {
  __typename?: 'Comment';
  /** The SQL ID of this entry */
  id: Scalars['Int'];
  /** The GitHub user who posted the comment */
  postedBy: User;
  /** A timestamp of when the comment was posted */
  createdAt: Scalars['Float'];
  /** The text of the comment */
  content: Scalars['String'];
  /** The repository which this comment is about */
  repoName: Scalars['String'];
};

/** XXX to be removed */
export type Vote = {
  __typename?: 'Vote';
  vote_value: Scalars['Int'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Submit a new repository, returns the new submission */
  submitRepository?: Maybe<Entry>;
  /** Vote on a repository submission, returns the submission that was voted on */
  vote?: Maybe<Entry>;
  /** Comment on a repository, returns the new comment */
  submitComment?: Maybe<Comment>;
};


export type MutationSubmitRepositoryArgs = {
  repoFullName: Scalars['String'];
};


export type MutationVoteArgs = {
  repoFullName: Scalars['String'];
  type: VoteType;
};


export type MutationSubmitCommentArgs = {
  repoFullName: Scalars['String'];
  commentContent: Scalars['String'];
};

/** The type of vote to record, when submitting a vote */
export enum VoteType {
  Up = 'UP',
  Down = 'DOWN',
  Cancel = 'CANCEL'
}

export type Subscription = {
  __typename?: 'Subscription';
  /** Subscription fires on every comment added */
  commentAdded?: Maybe<Comment>;
};


export type SubscriptionCommentAddedArgs = {
  repoFullName: Scalars['String'];
};
export type FeedQueryVariables = Exact<{ [key: string]: never; }>;


export type FeedQuery = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number, commentCount: number, repository: { __typename?: 'Repository', owner?: { __typename?: 'User', avatar_url: string } | null | undefined } } | null | undefined> | null | undefined };

export type Feed2QueryVariables = Exact<{
  v: Scalars['String'];
}>;


export type Feed2Query = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number } | null | undefined> | null | undefined };

export type Feed3QueryVariables = Exact<{
  v?: Maybe<Scalars['String']>;
}>;


export type Feed3Query = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number } | null | undefined> | null | undefined };

export type Feed4QueryVariables = Exact<{
  v?: Scalars['String'];
}>;


export type Feed4Query = { __typename?: 'Query', feed?: Array<{ __typename?: 'Entry', id: number } | null | undefined> | null | undefined };

export const FeedDocument = \`
    query feed {
  feed {
    id
    commentCount
    repository {
      owner {
        avatar_url
      }
    }
  }
}
    \`;
export const Feed2Document = \`
    query feed2($v: String!) {
  feed {
    id
  }
}
    \`;
export const Feed3Document = \`
    query feed3($v: String) {
  feed {
    id
  }
}
    \`;
export const Feed4Document = \`
    query feed4($v: String! = \\"TEST\\") {
  feed {
    id
  }
}
    \`;
function handleExecutionResult<T>(result: ExecutionResult, operationName: string) {
  if (result.errors) {
    const originalErrors = result.errors.map(error => error.originalError|| error);
    throw new AggregateError(originalErrors, \`Failed to execute \${operationName}: \\\\n\\\\t\${originalErrors.join('\\\\n\\\\t')}\`);
  }
  return result.data as T;
}
export function getSdk<C = any, R = any>(schema: GraphQLSchema, globalContext?: C, globalRoot?: R) {
    const feedCompiled = compileQuery(schema, parse(FeedDocument), 'feed');
    if(!(isCompiledQuery(feedCompiled))) {
      const originalErrors = feedCompiled?.errors?.map(error => error.originalError || error) || [];
      throw new AggregateError(originalErrors, \`Failed to compile feed: \\\\n\\\\t\${originalErrors.join('\\\\n\\\\t')}\`);
    }

    const feed2Compiled = compileQuery(schema, parse(Feed2Document), 'feed2');
    if(!(isCompiledQuery(feed2Compiled))) {
      const originalErrors = feed2Compiled?.errors?.map(error => error.originalError || error) || [];
      throw new AggregateError(originalErrors, \`Failed to compile feed2: \\\\n\\\\t\${originalErrors.join('\\\\n\\\\t')}\`);
    }

    const feed3Compiled = compileQuery(schema, parse(Feed3Document), 'feed3');
    if(!(isCompiledQuery(feed3Compiled))) {
      const originalErrors = feed3Compiled?.errors?.map(error => error.originalError || error) || [];
      throw new AggregateError(originalErrors, \`Failed to compile feed3: \\\\n\\\\t\${originalErrors.join('\\\\n\\\\t')}\`);
    }

    const feed4Compiled = compileQuery(schema, parse(Feed4Document), 'feed4');
    if(!(isCompiledQuery(feed4Compiled))) {
      const originalErrors = feed4Compiled?.errors?.map(error => error.originalError || error) || [];
      throw new AggregateError(originalErrors, \`Failed to compile feed4: \\\\n\\\\t\${originalErrors.join('\\\\n\\\\t')}\`);
    }

  return {
    async feed(variables?: FeedQueryVariables, context = globalContext, root = globalRoot): Promise<FeedQuery> {
      const result = await feedCompiled.query(root, context, variables);
      return handleExecutionResult(result, 'feed');
    },
    async feed2(variables: Feed2QueryVariables, context = globalContext, root = globalRoot): Promise<Feed2Query> {
      const result = await feed2Compiled.query(root, context, variables);
      return handleExecutionResult(result, 'feed2');
    },
    async feed3(variables?: Feed3QueryVariables, context = globalContext, root = globalRoot): Promise<Feed3Query> {
      const result = await feed3Compiled.query(root, context, variables);
      return handleExecutionResult(result, 'feed3');
    },
    async feed4(variables?: Feed4QueryVariables, context = globalContext, root = globalRoot): Promise<Feed4Query> {
      const result = await feed4Compiled.query(root, context, variables);
      return handleExecutionResult(result, 'feed4');
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;
async function test() {
  const schema = buildSchema(\`\\"\\"\\"\\"\\"\\"
type Query {
  \\"\\"\\"A feed of repository submissions\\"\\"\\"
  feed(
    \\"\\"\\"The sort order for the feed\\"\\"\\"
    type: FeedType!

    \\"\\"\\"The number of items to skip, for pagination\\"\\"\\"
    offset: Int

    \\"\\"\\"The number of items to fetch starting from the offset, for pagination\\"\\"\\"
    limit: Int
  ): [Entry]

  \\"\\"\\"A single entry\\"\\"\\"
  entry(
    \\"\\"\\"
    The full repository name from GitHub, e.g. \\"apollostack/GitHunt-API\\"
    \\"\\"\\"
    repoFullName: String!
  ): Entry

  \\"\\"\\"Return the currently logged in user, or null if nobody is logged in\\"\\"\\"
  currentUser: User
}

\\"\\"\\"A list of options for the sort order of the feed\\"\\"\\"
enum FeedType {
  \\"\\"\\"Sort by a combination of freshness and score, using Reddit's algorithm\\"\\"\\"
  HOT

  \\"\\"\\"Newest entries first\\"\\"\\"
  NEW

  \\"\\"\\"Highest score entries first\\"\\"\\"
  TOP
}

\\"\\"\\"Information about a GitHub repository submitted to GitHunt\\"\\"\\"
type Entry {
  \\"\\"\\"Information about the repository from GitHub\\"\\"\\"
  repository: Repository!

  \\"\\"\\"The GitHub user who submitted this entry\\"\\"\\"
  postedBy: User!

  \\"\\"\\"A timestamp of when the entry was submitted\\"\\"\\"
  createdAt: Float!

  \\"\\"\\"The score of this repository, upvotes - downvotes\\"\\"\\"
  score: Int!

  \\"\\"\\"The hot score of this repository\\"\\"\\"
  hotScore: Float!

  \\"\\"\\"Comments posted about this repository\\"\\"\\"
  comments(limit: Int, offset: Int): [Comment]!

  \\"\\"\\"The number of comments posted about this repository\\"\\"\\"
  commentCount: Int!

  \\"\\"\\"The SQL ID of this entry\\"\\"\\"
  id: Int!

  \\"\\"\\"XXX to be changed\\"\\"\\"
  vote: Vote!
}

\\"\\"\\"
A repository object from the GitHub API. This uses the exact field names returned by the
GitHub API for simplicity, even though the convention for GraphQL is usually to camel case.
\\"\\"\\"
type Repository {
  \\"\\"\\"Just the name of the repository, e.g. GitHunt-API\\"\\"\\"
  name: String!

  \\"\\"\\"
  The full name of the repository with the username, e.g. apollostack/GitHunt-API
  \\"\\"\\"
  full_name: String!

  \\"\\"\\"The description of the repository\\"\\"\\"
  description: String

  \\"\\"\\"The link to the repository on GitHub\\"\\"\\"
  html_url: String!

  \\"\\"\\"The number of people who have starred this repository on GitHub\\"\\"\\"
  stargazers_count: Int!

  \\"\\"\\"The number of open issues on this repository on GitHub\\"\\"\\"
  open_issues_count: Int

  \\"\\"\\"The owner of this repository on GitHub, e.g. apollostack\\"\\"\\"
  owner: User
}

\\"\\"\\"
A user object from the GitHub API. This uses the exact field names returned from the GitHub API.
\\"\\"\\"
type User {
  \\"\\"\\"The name of the user, e.g. apollostack\\"\\"\\"
  login: String!

  \\"\\"\\"The URL to a directly embeddable image for this user's avatar\\"\\"\\"
  avatar_url: String!

  \\"\\"\\"The URL of this user's GitHub page\\"\\"\\"
  html_url: String!
}

\\"\\"\\"A comment about an entry, submitted by a user\\"\\"\\"
type Comment {
  \\"\\"\\"The SQL ID of this entry\\"\\"\\"
  id: Int!

  \\"\\"\\"The GitHub user who posted the comment\\"\\"\\"
  postedBy: User!

  \\"\\"\\"A timestamp of when the comment was posted\\"\\"\\"
  createdAt: Float!

  \\"\\"\\"The text of the comment\\"\\"\\"
  content: String!

  \\"\\"\\"The repository which this comment is about\\"\\"\\"
  repoName: String!
}

\\"\\"\\"XXX to be removed\\"\\"\\"
type Vote {
  \\"\\"\\"\\"\\"\\"
  vote_value: Int!
}

\\"\\"\\"\\"\\"\\"
type Mutation {
  \\"\\"\\"Submit a new repository, returns the new submission\\"\\"\\"
  submitRepository(
    \\"\\"\\"
    The full repository name from GitHub, e.g. \\"apollostack/GitHunt-API\\"
    \\"\\"\\"
    repoFullName: String!
  ): Entry

  \\"\\"\\"
  Vote on a repository submission, returns the submission that was voted on
  \\"\\"\\"
  vote(
    \\"\\"\\"
    The full repository name from GitHub, e.g. \\"apollostack/GitHunt-API\\"
    \\"\\"\\"
    repoFullName: String!

    \\"\\"\\"The type of vote - UP, DOWN, or CANCEL\\"\\"\\"
    type: VoteType!
  ): Entry

  \\"\\"\\"Comment on a repository, returns the new comment\\"\\"\\"
  submitComment(
    \\"\\"\\"
    The full repository name from GitHub, e.g. \\"apollostack/GitHunt-API\\"
    \\"\\"\\"
    repoFullName: String!

    \\"\\"\\"The text content for the new comment\\"\\"\\"
    commentContent: String!
  ): Comment
}

\\"\\"\\"The type of vote to record, when submitting a vote\\"\\"\\"
enum VoteType {
  \\"\\"\\"\\"\\"\\"
  UP

  \\"\\"\\"\\"\\"\\"
  DOWN

  \\"\\"\\"\\"\\"\\"
  CANCEL
}

\\"\\"\\"\\"\\"\\"
type Subscription {
  \\"\\"\\"Subscription fires on every comment added\\"\\"\\"
  commentAdded(repoFullName: String!): Comment
}\`);
  const sdk = getJitSdk(schema);

  await sdk.feed();
  await sdk.feed3();
  await sdk.feed4();

  const result = await sdk.feed2({ v: \\"1\\" });

  if (result.feed) {
    if (result.feed[0]) {
      const id = result.feed[0].id
    }
  }
}"
`;
