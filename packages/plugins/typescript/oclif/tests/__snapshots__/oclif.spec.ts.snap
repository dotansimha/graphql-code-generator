// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`oclif cli builds from a mutation with string and enum type 1`] = `
"
const VoteDocument = \`
mutation Vote($name: String!, $type: VoteType!) {
  vote(repoFullName: $name, type: $type) {
    score
  }
}\`

export default class Vote extends Command {
  
  
  static flags = {
    help: flags.help({ char: 'h' }),
    name: flags.string({
      multiple: false,
      required: true,
    }),
    type: flags.string({
      multiple: false,
      required: true,
    })
  };

  async run() {
    const { flags } = this.parse(Vote);
    client.request(VoteDocument, flags)
      .then(data => {
        this.log(JSON.stringify(data, null, 2));
      })
      .catch(error => {
        console.log(error.response.data);
        console.error(error.response.errors.map((e: Error) => e.message).join(\\"\\\\n\\"));
      });
  }
}
"
`;

exports[`oclif cli builds from a read query with integer parameters 1`] = `
"
const GetFeedDocument = \`
query GetFeed($type: FeedType!, $offset: Int!, $limit: Int!) {
  feed(type: $type, offset: $offset, limit: $limit) {
    id
    commentCount
  }
}\`

export default class GetFeed extends Command {
  
  
  static flags = {
    help: flags.help({ char: 'h' }),
    type: flags.string({
      multiple: false,
      required: true,
    }),
    offset: flags.integer({
      multiple: false,
      required: true,
    }),
    limit: flags.integer({
      multiple: false,
      required: true,
    })
  };

  async run() {
    const { flags } = this.parse(GetFeed);
    client.request(GetFeedDocument, flags)
      .then(data => {
        this.log(JSON.stringify(data, null, 2));
      })
      .catch(error => {
        console.log(error.response.data);
        console.error(error.response.errors.map((e: Error) => e.message).join(\\"\\\\n\\"));
      });
  }
}
"
`;

exports[`oclif cli builds from a read query with single enum parameter 1`] = `
"
const GetFeedDocument = \`
query GetFeed($type: FeedType!) {
  feed(type: $type) {
    id
    commentCount
  }
}\`

export default class GetFeed extends Command {
  
  
  static flags = {
    help: flags.help({ char: 'h' }),
    type: flags.string({
      multiple: false,
      required: true,
    })
  };

  async run() {
    const { flags } = this.parse(GetFeed);
    client.request(GetFeedDocument, flags)
      .then(data => {
        this.log(JSON.stringify(data, null, 2));
      })
      .catch(error => {
        console.log(error.response.data);
        console.error(error.response.errors.map((e: Error) => e.message).join(\\"\\\\n\\"));
      });
  }
}
"
`;

exports[`oclif cli builds from a read query with single string parameter 1`] = `
"
const GetEntryDocument = \`
query GetEntry($name: String!) {
  entry(repoFullName: $name) {
    repository {
      name
    }
  }
}\`

export default class GetEntry extends Command {
  
  
  static flags = {
    help: flags.help({ char: 'h' }),
    name: flags.string({
      multiple: false,
      required: true,
    })
  };

  async run() {
    const { flags } = this.parse(GetEntry);
    client.request(GetEntryDocument, flags)
      .then(data => {
        this.log(JSON.stringify(data, null, 2));
      })
      .catch(error => {
        console.log(error.response.data);
        console.error(error.response.errors.map((e: Error) => e.message).join(\\"\\\\n\\"));
      });
  }
}
"
`;

exports[`oclif cli reads metadata from the @oclif directive 1`] = `
"
const GetCurrentUserDocument = \`
query GetCurrentUser {
  currentUser {
    login
  }
}\`

export default class GetCurrentUser extends Command {
  
static description = \\"Get Current User\\";

  
static examples: string[] = [\\"cli get-current-user\\",\\"hello\\"];

  static flags = {
    help: flags.help({ char: 'h' }),
    
  };

  async run() {
    const { flags } = this.parse(GetCurrentUser);
    client.request(GetCurrentUserDocument, flags)
      .then(data => {
        this.log(JSON.stringify(data, null, 2));
      })
      .catch(error => {
        console.log(error.response.data);
        console.error(error.response.errors.map((e: Error) => e.message).join(\\"\\\\n\\"));
      });
  }
}
"
`;
