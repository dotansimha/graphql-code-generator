// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Compatibility Plugin Issues Issue #1762 - __typename issues 1`] = `
"type DiscriminateUnion<T, U> = T extends U ? T : never;

type RequireField<T, TNames extends string> = T & { [P in TNames]: (T & { [name: string]: never })[P] };

export namespace GetMachineActiveEvents {
  export type Variables = GetMachineActiveEventsQueryVariables;
  export type Query = GetMachineActiveEventsQuery;
  export type Machine = GetMachineActiveEventsQuery['machine'];
  export type Unit = GetMachineActiveEventsQuery['machine']['unit'];
  export type Events = GetMachineActiveEventsQuery['machine']['unit']['events'][0];
  export type Details = GetMachineActiveEventsQuery['machine']['unit']['events'][0]['details'];
  export type CanErrorEventInlineFragment = (DiscriminateUnion<RequireField<GetMachineActiveEventsQuery['machine']['unit']['events'][0]['details'], '__typename'>, { __typename: 'CanErrorEvent' }>);
  export type DamageReportEventInlineFragment = (DiscriminateUnion<RequireField<GetMachineActiveEventsQuery['machine']['unit']['events'][0]['details'], '__typename'>, { __typename: 'DamageReportEvent' }>);
  export type PrecheckEventInlineFragment = (DiscriminateUnion<RequireField<GetMachineActiveEventsQuery['machine']['unit']['events'][0]['details'], '__typename'>, { __typename: 'PrecheckEvent' }>);
  export type ServiceKmEventInlineFragment = (DiscriminateUnion<RequireField<GetMachineActiveEventsQuery['machine']['unit']['events'][0]['details'], '__typename'>, { __typename: 'ServiceKmEvent' }>);
  export type ServiceHourEventInlineFragment = (DiscriminateUnion<RequireField<GetMachineActiveEventsQuery['machine']['unit']['events'][0]['details'], '__typename'>, { __typename: 'ServiceHourEvent' }>);
  export type ServiceCalendarEventInlineFragment = (DiscriminateUnion<RequireField<GetMachineActiveEventsQuery['machine']['unit']['events'][0]['details'], '__typename'>, { __typename: 'ServiceCalendarEvent' }>);
}
"
`;

exports[`Compatibility Plugin Issues Issue #1775 - Inline fragments 1`] = `
"type DiscriminateUnion<T, U> = T extends U ? T : never;

type RequireField<T, TNames extends string> = T & { [P in TNames]: (T & { [name: string]: never })[P] };

export namespace FetchServerAnalyticsData {
  export type Variables = FetchServerAnalyticsDataQueryVariables;
  export type Query = FetchServerAnalyticsDataQuery;
  export type Process = FetchServerAnalyticsDataQuery['process'];
  export type Servers = FetchServerAnalyticsDataQuery['process']['servers'][0];
  export type GetHostVirtualMachines = FetchServerAnalyticsDataQuery['process']['servers'][0]['getHostVirtualMachines'][0];
  export type Imacs = FetchServerAnalyticsDataQuery['process']['servers'][0]['imacs'][0];
  export type ServerChangeImacInlineFragment = (DiscriminateUnion<RequireField<FetchServerAnalyticsDataQuery['process']['servers'][0]['imacs'][0], '__typename'>, { __typename: 'ServerChangeImac' }>);
  export type ServerDecomImacInlineFragment = (DiscriminateUnion<RequireField<FetchServerAnalyticsDataQuery['process']['servers'][0]['imacs'][0], '__typename'>, { __typename: 'ServerDecomImac' }>);
  export type ServerSetupImacInlineFragment = (DiscriminateUnion<RequireField<FetchServerAnalyticsDataQuery['process']['servers'][0]['imacs'][0], '__typename'>, { __typename: 'ServerSetupImac' }>);
  export type ServerSize = (DiscriminateUnion<RequireField<FetchServerAnalyticsDataQuery['process']['servers'][0]['imacs'][0], '__typename'>, { __typename: 'ServerSetupImac' }>)['serverSize'];
  export type Sla = (DiscriminateUnion<RequireField<FetchServerAnalyticsDataQuery['process']['servers'][0]['imacs'][0], '__typename'>, { __typename: 'ServerSetupImac' }>)['sla'];
}
"
`;

exports[`Compatibility Plugin Issues Issue #1943 - Missing DiscriminateUnion on interface types with strict mode 1`] = `
"type DiscriminateUnion<T, U> = T extends U ? T : never;

type RequireField<T, TNames extends string> = T & { [P in TNames]: (T & { [name: string]: never })[P] };

export type GetBooksVariables = GetBooksQueryVariables;
export type GetBooksSchoolBooks = (NonNullable<(NonNullable<GetBooksQuery['schoolBooks']>)[0]>);
export type GetBooksTextBookInlineFragment = (DiscriminateUnion<RequireField<(NonNullable<(NonNullable<GetBooksQuery['schoolBooks']>)[0]>), '__typename'>, { __typename: 'TextBook' }>);
export type GetBooksColoringBookInlineFragment = (DiscriminateUnion<RequireField<(NonNullable<(NonNullable<GetBooksQuery['schoolBooks']>)[0]>), '__typename'>, { __typename: 'ColoringBook' }>);"
`;

exports[`Compatibility Plugin React Apollo Issue #1876 - should produce valid ts code with react-apollo 1`] = `
"export type MeVariables = MeQueryVariables;
export type MeMe = MeQuery['me'];
export type MeFriends = (NonNullable<MeQuery['me']['friends'][0]>);
export type Me_Friends = (NonNullable<(NonNullable<MeQuery['me']['friends'][0]>)['friends'][0]>);
export type Me__Friends = (NonNullable<(NonNullable<(NonNullable<MeQuery['me']['friends'][0]>)['friends'][0]>)['friends'][0]>);
export const useMe = useMeQuery;
export type AliasTestVariables = AliasTestQueryVariables;
export type AliasTestCurrentUser = AliasTestQuery['currentUser'];
export const useAliasTest = useAliasTestQuery;
export type Me2Variables = Me2QueryVariables;
export type Me2Me = UserFieldsFragment;
export const useMe2 = useMe2Query;
export type Me3Variables = Me3QueryVariables;
export type Me3Me = Me3Query['me'];
export type Me3UserInlineFragment = ({ __typename: 'User' } & Pick<Me3Query['me'], 'id' | 'name' | 'friends'>);
export type Me3Friends = (NonNullable<({ __typename: 'User' } & Pick<Me3Query['me'], 'id' | 'name' | 'friends'>)['friends'][0]>);
export const useMe3 = useMe3Query;
export type Me4Variables = Me4QueryVariables;
export type Me4Me = Me4Query['me'];
export type Me4UserInlineFragment = ({ __typename: 'User' } & Pick<Me4Query['me'], 'name' | 'friends'>);
export type Me4Friends = (NonNullable<({ __typename: 'User' } & Pick<Me4Query['me'], 'name' | 'friends'>)['friends'][0]>);
export type Me4_UserInlineFragment = ({ __typename: 'User' } & Pick<(NonNullable<({ __typename: 'User' } & Pick<Me4Query['me'], 'name' | 'friends'>)['friends'][0]>), 'id' | 'name'>);
export const useMe4 = useMe4Query;
export type MoreUserFieldsFriends = (NonNullable<MoreUserFieldsFragment['friends'][0]>);
export type MoreUserFields_Friends = (NonNullable<(NonNullable<MoreUserFieldsFragment['friends'][0]>)['friends'][0]>);
export type Me5Variables = Me5QueryVariables;
export type Me5User = (NonNullable<Me5Query['user']>);
export type Me5TestField = (NonNullable<(NonNullable<(NonNullable<Me5Query['user']>)['testField']>)[0]>);
export type Me5Friends = (NonNullable<(NonNullable<Me5Query['user']>)['friends'][0]>);
export const useMe5 = useMe5Query;"
`;

exports[`Compatibility Plugin Should generate mapping to 1.0 types according to fields usage and selection set when array is in use and have duplicate names 1`] = `
"export namespace Me {
  export type Variables = MeQueryVariables;
  export type Query = MeQuery;
  export type Me = MeQuery['me'];
  export type Friends = MeQuery['me']['friends'][0];
  export type _Friends = MeQuery['me']['friends'][0]['friends'][0];
  export type __Friends = MeQuery['me']['friends'][0]['friends'][0]['friends'][0];
}

export namespace AliasTest {
  export type Variables = AliasTestQueryVariables;
  export type Query = AliasTestQuery;
  export type CurrentUser = AliasTestQuery['currentUser'];
}

export namespace Me2 {
  export type Variables = Me2QueryVariables;
  export type Query = Me2Query;
  export type Me = UserFieldsFragment;
}

export namespace UserFields {
  export type Fragment = UserFieldsFragment;
}

export namespace Me3 {
  export type Variables = Me3QueryVariables;
  export type Query = Me3Query;
  export type Me = Me3Query['me'];
  export type UserInlineFragment = ({ __typename: 'User' } & Pick<Me3Query['me'], 'id' | 'name' | 'friends'>);
  export type Friends = ({ __typename: 'User' } & Pick<Me3Query['me'], 'id' | 'name' | 'friends'>)['friends'][0];
}

export namespace Me4 {
  export type Variables = Me4QueryVariables;
  export type Query = Me4Query;
  export type Me = Me4Query['me'];
  export type UserInlineFragment = ({ __typename: 'User' } & Pick<Me4Query['me'], 'name' | 'friends'>);
  export type Friends = ({ __typename: 'User' } & Pick<Me4Query['me'], 'name' | 'friends'>)['friends'][0];
  export type _UserInlineFragment = ({ __typename: 'User' } & Pick<({ __typename: 'User' } & Pick<Me4Query['me'], 'name' | 'friends'>)['friends'][0], 'id' | 'name'>);
}

export namespace MoreUserFields {
  export type Fragment = MoreUserFieldsFragment;
  export type Friends = MoreUserFieldsFragment['friends'][0];
  export type _Friends = MoreUserFieldsFragment['friends'][0]['friends'][0];
}

export namespace Me5 {
  export type Variables = Me5QueryVariables;
  export type Query = Me5Query;
  export type User = Me5Query['user'];
  export type TestField = Me5Query['user']['testField'][0];
  export type Friends = Me5Query['user']['friends'][0];
}
"
`;

exports[`Compatibility Plugin Should work with custom Query root type 1`] = `
"export namespace Me {
  export type Variables = MeQueryVariables;
  export type Query = MeQuery;
  export type Me = MeQuery['me'];
  export type Friends = MeQuery['me']['friends'][0];
  export type _Friends = MeQuery['me']['friends'][0]['friends'][0];
  export type __Friends = MeQuery['me']['friends'][0]['friends'][0]['friends'][0];
}

export namespace AliasTest {
  export type Variables = AliasTestQueryVariables;
  export type Query = AliasTestQuery;
  export type CurrentUser = AliasTestQuery['currentUser'];
}

export namespace Me2 {
  export type Variables = Me2QueryVariables;
  export type Query = Me2Query;
  export type Me = UserFieldsFragment;
}

export namespace UserFields {
  export type Fragment = UserFieldsFragment;
}

export namespace Me3 {
  export type Variables = Me3QueryVariables;
  export type Query = Me3Query;
  export type Me = Me3Query['me'];
  export type UserInlineFragment = ({ __typename: 'User' } & Pick<Me3Query['me'], 'id' | 'name' | 'friends'>);
  export type Friends = ({ __typename: 'User' } & Pick<Me3Query['me'], 'id' | 'name' | 'friends'>)['friends'][0];
}

export namespace Me4 {
  export type Variables = Me4QueryVariables;
  export type Query = Me4Query;
  export type Me = Me4Query['me'];
  export type UserInlineFragment = ({ __typename: 'User' } & Pick<Me4Query['me'], 'name' | 'friends'>);
  export type Friends = ({ __typename: 'User' } & Pick<Me4Query['me'], 'name' | 'friends'>)['friends'][0];
  export type _UserInlineFragment = ({ __typename: 'User' } & Pick<({ __typename: 'User' } & Pick<Me4Query['me'], 'name' | 'friends'>)['friends'][0], 'id' | 'name'>);
}

export namespace MoreUserFields {
  export type Fragment = MoreUserFieldsFragment;
  export type Friends = MoreUserFieldsFragment['friends'][0];
  export type _Friends = MoreUserFieldsFragment['friends'][0]['friends'][0];
}

export namespace Me5 {
  export type Variables = Me5QueryVariables;
  export type Query = Me5Query;
  export type User = Me5Query['user'];
  export type TestField = Me5Query['user']['testField'][0];
  export type Friends = Me5Query['user']['friends'][0];
}
"
`;

exports[`Compatibility Plugin Should work with interfaces and inline fragments 1`] = `
"type DiscriminateUnion<T, U> = T extends U ? T : never;

type RequireField<T, TNames extends string> = T & { [P in TNames]: (T & { [name: string]: never })[P] };

export namespace Something {
  export type Variables = SomethingQueryVariables;
  export type Query = SomethingQuery;
  export type Node = SomethingQuery['node'];
  export type AInlineFragment = (DiscriminateUnion<RequireField<SomethingQuery['node'], '__typename'>, { __typename: 'A' }>);
  export type BInlineFragment = (DiscriminateUnion<RequireField<SomethingQuery['node'], '__typename'>, { __typename: 'B' }>);
}
"
`;
